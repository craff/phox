Import nat.
Import list.
Import list_nat.
Import ramsey.
flag auto_lvl 1.

(* lemma to make the previous definition usable in a more standard way *)

fact increasing'' /\f:(N => N) (increasing f -> 
  /\x,y:N (x <= y -> f x <= f y)).
intros.
elim H3 with [rec].
intros.
elim H.
prove f z <= f (S z).
elim H0.
trivial.
trivial.
trivial.
save.

Inductive Embed D R l l' =
  nil : /\l:(List D) Embed D R nil l
| cons1 : /\l,l':(List D) /\x':D (
    Embed D R l l' -> Embed D R l (x'::l'))
| cons2 : /\l,l':(List D) /\x,x':D (
    Embed D R l l' -> R x x' -> Embed D R (x::l) (x'::l'))
.

Import bin_rel.

fact Embed.reflexive /\D,R (reflexive D R -> reflexive (List D) (Embed D R)).
auto.
save.

fact Embed.transitive /\D,R (transitive D R -> transitive (List D) (Embed D R)).
intros.
intros.
prove /\a:(List D) (Embed D R a b ->  Embed D R a c).
elim H4;; rmh H0 H1 H2 H3 H4.
intros.
elim H1 with [case] ;; trivial.

intros.
elim H1 with [case].
trivial.
intro.
elim H9.

intro cons1.
trivial.
elim H9.
trivial.
axiom H1.

intros.
elim H1 with [case].
trivial.
intro.
elim H10.
left H13.
axiom H12.
left H16.
intro cons2.
elim H10.
axiom H13.
elim H.
next.
axiom H14.
axiom H11.
trivial.
save.

def wqo D R =  reflexive D R & transitive D R & /\f:(N => D) \/i,j:N (i < j & R (f i) (f j)).

lemma lem1 /\X (\/n:N X n -> \/n:N (X n & /\p:N (X p -> n <= p))).
intros.
lefts H $& $\/.
by_absurd.
elim False.
rewrite_hyp H1 demorganl.
use /\n:N ~ X n.
trivial.
intros.
elim well_founded.N with H2.
intros.
intros.
apply H1 with H5.
lefts G $& $\/.
apply not.lesseq.imply.less.N with H8.
trivial.
save.


fact higman /\D,R (wqo D R -> wqo (List D) (Embed D R)).
intros.
lefts H.
intros.
elim Embed.reflexive.
elim Embed.transitive.
by_absurd.
rewrite_hyp H2 demorganl.
elim False.
lefts H2 $& $\/.
rename x f0.
local good f = /\x,x0:N  (x < x0 -> ~ Embed D R (f x) (f x0)).
prove good f0.
axiom H3.
rmh H3.
local eqstart f g n = /\i:N (i < n -> f i = g i).
local nextgood f g n = eqstart f g n & good g & /\h:(N => List D) (good h -> eqstart f h n -> length (g n) <= length (h n)).
prove /\n:N /\f:(N => List D) (good f -> \/g:(N => List D) (nextgood f g n)).
intros.
prove \/s:N\/g:(N => List D) (eqstart f g n & good g & length (g n) = s).
intros $& $\/.
instance ?1 length (f n).
instance ?2 f.
trivial.
trivial.
trivial.
apply lem1 with G0.
lefts G1 $& $\/.
intros $& $\/.
instance ?3 g.
intros.
intros.
elim H8.
trivial =H12 H3.
intros $& $\/.
instance ?4 h.
trivial =.
local next n f = Def \g ((N => List D) g & nextgood f g n).
prove /\n:N  /\f:(N => List D)  (good f -> (N => List D) (next n f) & nextgood f (next n f) n).
intros.
elim AC.
elim G0.
rmh G0.
local psi = def_rec.N f0 next.
prove /\n:N ((N => List D) (psi n) & good (psi n)).
intro 2.
elim H3.
rewrite psi def_rec.N0.N.
trivial =H2 G.
lefts H5.
apply G1 with H5 and H6.
axiom H4.
rewrite psi def_rec.S.N.
intros.
elim G0.
left G0.
left H8.
elim H9.
local f1 n = psi (S n) n.
prove (N => List D) f1.
trivial =G0.
prove /\n,p:N (n <= p -> eqstart (psi n) (psi p) n).
intro 2.
elim H3.
trivial =.
intros.
elim H7 with [rec].
trivial =H4.
trivial =H4.
prove eqstart (psi z) (psi (S z)) (S y).
rewrite -p 1 psi.
rewrite def_rec.S.N.
from eqstart (psi z) (next z (psi z)) (S y).
apply G0 with H8.
left G3.
apply G1 with H11 and H12.
axiom H8.
left G3.
left H14.
intros.
left H17.
elim H17.
trivial =H8 H9 H16 H17 H10 H14.
intros.
unfold_hyp H10 eqstart.
rewrite H10.
elim G3.
prove good f1.
intros.
prove f1 x = psi (S x0) x.
elim G3;; trivial 2.
rewrite f1 G4.
prove psi (S x) x = psi (S x0) x.
elim G3;; trivial 2.
rewrite G5.
elim G0 with [r] ;; trivial 1.
prove /\n:N /\f: (N => List D) (good f -> eqstart f f1 n -> length (f1 n) <= length (f n)).
intros.
rewrite f1 psi def_rec.S.N.
apply G0 with H3.
left G5.
apply G1 with H3 and H7 and H8.
left G5.
left H10.
left H11.
elim H12.
prove eqstart f1 (psi n) n.
elim H3.
trivial 1.
intros.
elim G3;; trivial 1.
intros.
unfold_hyp G5 eqstart.
rewrite -r G5.
unfold_hyp H6 eqstart.
rewrite -r H6.
intro.

rmh H2 G G1 G0 G3.
prove /\n:N \/a:D \/w:(List D) (f1 n = a::w).
intros.
apply G2 with H2.
elim G with [case].
prove Embed D R (f1 n) (f1 (S n)).
(* boucle intros. *)
rewrite H3.
intro nil.
elim G2.
trivial 1.
elim G4 with n < S n.
trivial 1.
trivial 1.
trivial 1.

local fa n = head (f1 n).
local fw n = tail (f1 n).

prove -NN /\n:N (f1 n != nil).
trivial.

prove /\n:N (D (fa n)).
intros.
intro head.
elim G2.
trivial.

prove /\n:N (List D (fw n)).
intros.
intro tail.
elim G2.
trivial.

prove /\n:N f1 n = fa n::fw n.
intros.
trivial.

local color n p = (n <= p & R (fa n) (fa p)) or (p <= n & R (fa p) (fa n)).
prove coloring color.
intros.
intros.
apply excluded_middle with color x y.
left G6.
select 2.
prove color x y = False.
trivial =H4 +equal.proposition.
rewrite G6.
trivial.
prove color x y = True.
trivial =H4 +equal.proposition.
rewrite G6.
trivial =.

intros.
elim equal.proposition.
trivial =.

apply ramsey2 with (\x x) and G6.
trivial =.
lefts G7 $& $\/.
unfold_hyp H4 constant2.
elim G6 with [l] then (h N0) and (h N1).
trivial =H2.
trivial =H2.
next.
prove /\n,p:N (n < p -> R (fa (h n)) (fa (h p))).
intros.
prove color (h n) (h p).
apply H4 with N0 and n and N1 and p and H9.
trivial =.
trivial =.
trivial =.
axiom H5.
left G7.
select 2.
prove h n < h p.
elim increasing' with H3.
elim lesseq.contradiction.N with h n and h p.
trivial =H2 H7.
trivial =H2 H8.
intro.
elim H10.
left H10.

local f2 n = if n < h N0 then f1 n else fw (h (n - h N0)).
prove  (N => List D) f2.
intros.
elim lesseq.case1.N with (h N0) and N x.
elim H2.
intro.

next -1.
from List D (f1 x).
elim G2.
apply lesseq.imply.not.greater.N with H8.
elim H2.
intro.

from List D (fw ?).
elim G1.
elim H2.
intros.
elim H2.
intro.

prove good f2.
intros.
elim lesseq.case1.N with (h N0) and N x0.
elim H2.
intro.
next -1.
prove x < h N0.
trivial =H7 H8 H9 H10.
from ~ Embed D R (f1 x) (f1 x0).
elim G4.
apply lesseq.imply.not.greater.N with H10.
elim H2.
intro.
elim lesseq.case1.N with (h N0) and N x.
elim H2.
intro.
apply lesseq.imply.not.greater.N with H11.
elim H2.
intro.
from ~ Embed D R (fw (h (x - h N0))) (fw (h (x0 - h N0))).
intro.
prove  Embed D R (f1 (h (x - h N0))) (f1 (h (x0 - h N0))).
rewrite -nc G3.
intro cons2.
elim G1.
elim H2.
intro.
elim H2.
intro.
elim G1.
elim H2.
intro.
elim H2.
intro.
elim G0.
elim H2.
intro.
elim H2.
intro.
elim G0.
elim H2.
intro.
elim H2.
intro.
elim G7.
intro.
elim H2.
intro.
intro.
elim H2.
intro.
trivial= H2 H7 H8 H9 H10 H11.
elim H2.
intro.
elim H2.
intro.
elim H2.
intro.
elim H2.
intro.

prove (h (x - h N0)) < (h (x0 - h N0)).
elim increasing' with H3.
intro.
elim H2.
intro.
intro.
elim H2.
intro.
trivial =H2 H7 H8 H9 H10 H11.
apply G4 with G12.
elim H2.
intro.
elim H2.
intro.
elim H2.
intro.
elim H2.
intro.
trivial =G11 G13.

from ~ Embed D R (f1 x) (fw (h (x0 - h N0))).
intro.
prove  Embed D R (f1 x) (f1 (h (x0 - h N0))).
rewrite -p 1 -nc G3.
intro cons1.
elim G2.
elim G1.
elim H2.
intro.
elim H2.
intro.
elim G0.
elim H2.
intro.
elim H2.
intro.
elim H2.
intro.
elim H2.
intro.

prove x < (h (x0 - h N0)).
prove h N0 <= h (x0 - h N0).
elim increasing'' with H3.
intro.
intro.
elim H2.
intro.
intro.
intro.
elim H2.
intro.
trivial =H2 H7 H8 H9 H10 H11 G11.
apply G4 with G11.
elim H2.
intro.
elim H2.
intro.
trivial =G10 G12.

apply G5 with h N0 and G9 then ?.
elim H2.
intro.
intros.
intro.
rewrite_hyp G10 G3.
rewrite_hyp G10 -nc length.cons.List.
rewrite_hyp G10 f2.
rewrite_hyp G10 -nc False.if.B.
prove S length (fw (h N0)) <= length (fw (h N0)).
axiom G10.
elim G11 with [Sx_x].
intro.
elim List_increasing with D and \x True.
intros.
intro.
elim G1.
elim H2.
intro.
intro.
elim H7 with [Sx_x].
elim H2.
intro.
elim List_increasing with D and \x True.
intros.
intro.
elim G1.
elim H2.
intro.

prove /\n,p:N (n < p -> ~ R (fa (h n)) (fa (h p))).
intros.
prove ~ color (h n) (h p).
apply H4 with N0 and n and N1 and p and H8.
intro.
intro.
rewrite -nc -r G7.
trivial =.
intro.
elim G7.
intro l.
intro.
elim increasing'' with H3.
trivial = H6 H7 H8 H9.
apply H1 with \x (fa (h x)) and ?.
intros.
elim G0.
elim H2.
lefts G8 $& $\/.
apply G7 with H9.
elim G8.
save.
