
tex
  title = "Euclidian division"
  author = "Christophe Raffalli"
  institute = "\\'Equipe de logique de Paris VII (URA 753)"
  documents = math
.



Import nat.
Import bool.

(* starts automatic detection of axioms *)
flag auto_lvl 2.
flag auto_type true.

def Infix[5.0] p "divise" q = ∃r:N p × r = q.

def Pgcd n m p =
  N p ∧ p divise n ∧ p divise m ∧
  ∀q:N (q divise n ∧ q divise m → q divise p).

Cst pgcd : nat → nat → nat.

claim pgcd_ax ∀n,m:N (
  pgcd n m =
    if n = N0 then
      m
    else if m < n then
      pgcd m n
    else
      pgcd n (m - n)).

new_equation pgcd_ax.

goal ∀n:N n divise N0.
trivial.
save divise.N0.

goal ∀n:N n divise n.
trivial.
save divise.self.

goal ∀n:N (n ≠ N0 → Pgcd N0 n n).
intros.
intros.
elim divise.N0.
elim divise.self.
intros.
trivial.
save Pgcd.N0.

goal ∀p∀n,m:N (Pgcd n m p → Pgcd m n p).
intros.
lefts H1.
intros.
intros.
elim H4.
trivial =H6.
save Pgcd.symmetric.

goal ∀n,m:N∀p (n ⩽ m → Pgcd n (m - n) p → Pgcd n m p).
intros.
lefts H2.
lefts H3 $∃ $∧ $divise.
lefts H4 $∃ $∧ $divise.
intros.
trivial =H3 H6.
intro.
instance ?1 (r + r0).
trivial.
intros.
elim H5.
left H9.
intro.
elim H8 with [case].
trivial.
lefts H9 Pgcd $∃ $∧ $divise.
lefts H10 Pgcd $∃ $∧ $divise.
intro.
instance ?2 (r2 - r1).
prove r1 ⩽ r2.
elim lesseq.lmul_left.N with ? and ? and ? and ? and q.
trivial.
from H1.
trivial.
save Pgcd.sub.

goal ∀n,m:N (n ≠ N0 ∨ m ≠ N0 → Pgcd n m (pgcd n m)).
intro 2.
elim well_founded.N with H.
intro 5.
elim well_founded.N with H2.
intros.
elim H0 with [case].
rewrite -l 1 pgcd_ax.
rewrite True.if.B.
elim Pgcd.N0.
trivial.
rewrite -l 1 pgcd_ax.
rewrite -l 1 False.if.B.
elim lesseq.case1.N with a then a0.
next.
rewrite True.if.B.
elim Pgcd.symmetric.
elim H1.
trivial =H5 H7 H6.
prove ¬ a0 < a.
trivial =H0 H3 H8 +lesseq.contradiction.N.
rewrite False.if.B.
elim Pgcd.sub.
elim H4.
trivial -H1 H4 H5.
intro l.
trivial -H1 H4 H5.
save pgcd.correct.
