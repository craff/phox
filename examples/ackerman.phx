flag auto_lvl 1.
(*header 2000/12/22

        title = "Ackermann function"
        author = "Christophe Raffalli et Paul Roziere"
        institute = "Lama Chambery  et   PPS Paris VII"
*)


(** Introduction. *)

(* texte Une fonction d'Ackermann peut être vue comme une suite de
fonctions primitives récursives telle que toute fonction primitive
récursive est majorée à partir d'un certain rang par une fonction de
cette suite. En particulier la fonction diagonale de la fonction
d'Ackermann majore toutes les fonctions primitives récursives, et donc
n'est pas primitive récursive.

Le principal résultat de de fichier est la proposition
$acksn_domine_Ackpn qui montre que n'importe quelle itération d'une
fonction de la suite est majorée à partir d'un certain rang par la
fonction suivante. C'est le lemme essentiel pour démontrer ce qui est
indiqué dans le précédent paragraphe.

On a besoin tout d'abord de quelques résultats élémentaires
essentiellement de majoration et croissance.

La preuve de la dernière proposition ($acksn_domine_Ackpn) met en
évidence l'utilisation des méta-variables ou variables existentielles
dans phox, et probablement que leur usage n'est pas encore pleinement
satisfaisant.
*)


(** Définition. *)
Import nat.


(*texte On propose une définition axiomatique de la fonction d'Ackermann. Une
définition par récurrence serait possible, mais assez lourde dans l'état
actuel. *)


(*définition Fonction d'Ackermann. *) 

(*texte Il y a plusieurs version de la fonction d'Ackermann. La fonction
originale avait 3 arguments. On utilise une version simplifiée à deux
arguments introduite par Rozsa Péters. La caractéristique essentielle est
la clause  utilisant une récurrence double avec imbrication
des deux appels récursifs.

Celle qui suit est initialisée de façon que les premières fonctions de la
suite soient simples (x -> x+2, x-> 2x, x -> 2^x, ...). *)

Cst ack : nat -> nat -> nat.

claim ack0x          /\x:N ack N0 x = x + N2.
claim ack10               ack N1 N0 = N0.
claim ackn0    /\n:N ack (S S n) N0 = N1.
claim acknx /\n,x:N ack (S n) (S x) = ack n (ack (S n) x).       
(*enddefinition *)

(*texte On indique aux tactiques de PhoX d'utiliser les clauses de
définitions comme des règles de réécriture.  *)

new_equation ack0x.
new_equation ack10.
new_equation ackn0.
new_equation acknx.

fact (* totalité de la fonction d'Ackermann *)
ack_total /\n,x:N N (ack n x).
intro 2.
elim H.
trivial.
intro 2.
elim H2.
elim H0 with [case].
trivial.
trivial.
elim H0 with [case].
trivial.
trivial.
save.

(*texte On indique aux tactiques de PhoX que la fonction d'Ackermann est
totale. *)

new_intro -t -i total ack_total.

(** Quelques valeurs de la fonction d'Ackermann. *)

(*** Une égalité utile pour la réécriture. *)
fact (* ack n+1 2 = 2 *) ackn1 /\n:N(ack (S n) N1 = N2).
intros.
elim  H.
intro.
rewrite acknx.
rewrite  ackn0.
save.

(*texte Les tactiques de PhoX pourront aussi utiliser le précedent
résultat comme règle de réécriture. *) 
new_equation ackn1.


def_thlist (* Une liste de règles pour la réécriture sur la fonction
d'Ackermann *) calcul.ack = ack0x ack10 ackn0 acknx ackn1.

(*** Petites valeurs. *)
goal ack N0 N1 = ?.
rewrite calcul.N calcul.ack.
intro.
save ack01. (* N3 *)

goal ack N2 N2 = ?.
rewrite calcul.N calcul.ack.
intro.
save ack22.

goal ack N3 N3 = ?.
rewrite calcul.N calcul.ack.
intro.
save ack33.
(*  ack33 = ack N3 N3 = S S S S S S S S S S S S S S S S N0 : theorem *)

goal ack N4 N2 = ?.
rewrite calcul.N calcul.ack.
intro.
save ack42.
(* ack N4 N2 = S S N2 *)

(*** Les premières fonctions de la suite. *)

fact ack1x /\x : N (ack N1 x = N2 *x).
intros.
elim H.
trivial.
rewrite calcul.ack.
rewrite H1.
intro.
save.

fact  ack2x /\x : N (ack N2 x = N2^x).
intros.
elim H.
trivial.
rewrite calcul.ack ack1x.
rewrite H1.
intro.
save.

(** Premiers résultats de majoration. *)

lemma  ack_sup_0 /\n,x:N ((n <> N1 or x > N0) -> ack n x >N0).
intro 2.
elim -1[case] H.
trivial.
elim  H0.

intros.
rewrite ack1x.
trivial.
intro 2.
elim H4.
trivial.
rewrite acknx.
intros.
elim H6 with [rec].
trivial.
intros.
intros.
trivial.
elim H3.
intros.
trivial.
save.

lemma  acknx_sup_x /\n,x:N (x > N0 -> ack n x > x).
intro 2.
elim H.
trivial.
intro 2.
elim H2.
trivial.
intro.
rmh H5.
rewrite acknx.
elim -1 [case] H3.
elim -1 [case] H0.
trivial 1.
elim H1 ;; Try intros;; Try intros.
apply H4 ;; rmh H4.
trivial.
prove ack (S y) y0 > N0.
trivial.
apply H1 with G0 ;; Try intros.
trivial.
save.

lemma acknx_lsup_x /\n,x:N (ack n x >= x).
intros.
elim -1[case] H0.
trivial.
elim acknx_sup_x.
intros.
trivial.
intros.
intros.
save.

(** Résultats de croissance. *)

(*** Quelques définitions et résultats généraux sur la croissance des
suites entières. *)

(*note A déplacer dans une librairie ? *)

 def increasing.N f = /\x,x':N
(x < x' -> f x < f x').  

def lincreasing.N f = /\x,x':N (x <= x' -> f x
<= f x').


fact inc_lem.N /\f:(N=>N) (/\x:N f x < f (S x) -> increasing.N f).
intros.
intros.
elim H3 with [rec] ;; Try trivial -H3.
save.


fact inc_lem'.N /\f:(N=>N) (/\x:N f x <= f (S x) -> lincreasing.N f).
intros.
intros.
elim H3 with [rec] ;; Try trivial -H3.
save.



(*** Croissance sur la seconde composante. *)

lemma  acknx_less_acknsx /\n,x:N ack n x < ack n (S x).
intros.
elim -1[case] H.
trivial.
rewrite acknx.
elim -1[case] H0.
elim -1 [case] H1.
trivial.
trivial.
elim acknx_sup_x ;; Try intros.
elim ack_sup_0 ;; Try intros.
trivial.
save.

fact  ackn_increase /\n:N increasing.N (ack n). (* non utilisé ensuite *)
intros.
elim inc_lem.N ;; trivial + acknx_less_acknsx..
save.

fact ackn_lincrease /\n:N lincreasing.N (ack n).
intros.
elim inc_lem'.N ;; trivial + acknx_less_acknsx.
save.

(*** Croissance sur la première composante. *)

lemma  acknx_less_acksnx /\n,x:N(x > N1 -> ack n x <= ack (S n) x).
intros.
elim -1[case] H0.
trivial.
rewrite H3 acknx calcul.N.
prove S y <= ack (S n) y.
trivial + acknx_sup_x..
elim ackn_lincrease;; trivial.
save.

fact  ackx_lincrease /\n,n',x:N (x > N1 -> n <= n' -> ack n x <= ack n' x).
intros.
elim  inc_lem'.N with (\n (ack n x));; Try trivial.
trivial +acknx_less_acksnx.
save.

(*** Une majoration utile dans la suite. *)
lemma  acksny_sup_2y /\n,y:N (ack (S n) y >= N2 * y).
intros.
elim -1[case] H0.
trivial.
elim -1[case] H1.
trivial.
rewrite -r ack1x.
elim ackx_lincrease ;; Try trivial.
save.


(** L'itérée d'une composante de la fonction d'Ackermann. *)

(*** Définition. *)
def it a f  n = def_rec.N a (\p,r (f r)) n.
def Ack k n x = it x (ack n) k.

goal /\n,x:N Ack N0 n x = x.
trivial.
save Ack0.

goal /\k,n,x:N(Ack (S k) n x = ack n (Ack  k n x)).
trivial.
save AckS.

new_equation Ack0. new_equation AckS.

goal /\k,n,x:N N(Ack k n x).
intros.
elim H.
trivial.
trivial.
save Ack_total.

new_intro -t total Ack_total.

(*** La fonction d'Ackermann itérée est croissante sur sa dernière composante. *)

fact  Ackkn_lincrease /\ k,n:N lincreasing.N (Ack k n).
intros.
elim H.
intros.
rewrite Ack0.
intros.
rewrite AckS.
elim ackn_lincrease.
intros.
intros.
elim H2.
save.

(*** La fonction d'Ackermann itérée est croissante sur la première composante (le nombre d'itérations). *)
fact  Acknx_lincrease /\ n,x:N lincreasing.N \k(Ack k n x).
intros.
intros.
elim H3 with [rec].
intro.
intro.
rewrite AckS.
elim H6.
intros.
elim acknx_lsup_x.
intros.
save.


(*** 
La n+1-ième composante de la fonction d'Ackermann comme itérée de
la n-ième. *)

goal /\n,x,y:N(ack (S n) (y + x) = Ack  x n (ack (S n) y)). 
intros.
elim -1[case] H0.
rewrite Ack0.
intro.
rewrite calcul.ack Ack0 AckS.
elim H.
trivial.
trivial.
save ack_Ack.


(** La n+1-ième composante de la fonction d'Ackermann majore à partir
d'un certain rang n'importe quelle itérée de sa n-ième composante. *)

(* Je n'ai pas utilisé ce résultat. Cela peut simplifier la suite.
goal /\k,n,x:N Ack k n x <= ack (S n) (x+k).
intros.
rewrite ack_Ack.
elim Ackkn_lincrease.
intros.
elim -1[case] H1.
trivial.
elim acknx_sup_x.
intros.
intros.
trivial.
intros.
intros.
trivial.
trivial.
save Ack_lem1.
*)


def Infix[5]  f "domine" g = \/k:N/\x:N(x >= k -> g x <= f x).


proposition  acksn_domine_Ackpn /\k,n:N ack (S n) domine Ack k n.
intros.
intro.
lock ?1.
use N ?1.
intro.
intros.
use k <= ?1.
local y = x - k.
prove N y.
trivial.
prove x = y + k.
trivial.
rewrite G2.
rewrite ack_Ack.
elim  Ackkn_lincrease.
(* intros.  décompose y, alors que x = y +k ! *)
trivial.
trivial.
apply acksny_sup_2y with  n and G1.
use y + k <= N2 * y.
trivial 2 = G3 G4 G1 H H0.
rmh G3.
use k <=y.
slh G3 G1 H.
intro lesseq.add.
trivial 2.
unfold y.
rmh H0 G1 G2.
instance ?1 k + k.
trivial.
intros.
intros.
save.

Import list.
Import list_nat.

def compose f gs l =
  f (map (\g (g l)) gs).

def recurrence f g l =
  def_rec.N (f (tail l)) (\p \r (g (r::p::(tail l)))) (head l).

Inductive PR n f -ce =
  zero : /\n:N PR n (\l N0)
| succ : PR N1 (\l (S (head l)))
| proj : /\n,p:N (p < n -> PR n (\l (nth l p)))
| comp -ci : /\n,p:N/\f:(PR n)/\gs:(List (PR p)) (length gs = n -> PR p (compose f gs)) 
| recu : /\n:N/\f:(PR n)/\g:(PR (S S n)) PR (S n) (recurrence f g).

prove_claim comp.PR.
intros.
unfold PR.
intros.
elim H7.
axiom H.
unfold_hyp H1 PR.
elim H1.
elim H2.
intro.
intro.
unfold_hyp H9 PR.
elim H9.
save.

prove_claim rec.PR.
intros.
use X n f & PR n f.
left G.
unfold_hyp H4 PR.
elim H4;; rmh H4.
trivial.
trivial.
trivial.
intros.
intro.
elim H2.
axiom H4.
left H6.
left H6.
trivial =H7.
trivial =H7.
intro.
axiom H4.
left H6.
trivial =H7.
trivial.
save.

def Array D n l = List D l & length l = n.

fact PR.total /\n:N /\f:(PR n) /\l:(Array N n) N (f l).
intro 4.
elim H0 with [rec].

trivial.

trivial.

trivial.

unfold compose.
intros.
elim H4.
trivial.

intros.
left H6.
elim H6 with [case].
trivial.
left H7.
intro.
intros.
elim H5.
intro.
trivial.
intro.
elim H3.
intro n.
trivial.
intro.
trivial.
save.

def Infix[5]  f "Domine" g "with" n = \/k:N/\x:N/\l:(List N) 
  (length l = n -> x >= k -> /\i:N (i < n -> nth l i <= x) -> g l <= f x).

(*
goal /\n:N /\f:(PR n) \/p:N ack p Domine f with n.
intros.
elim H0.

trivial =H1.

intros $& $\/ $-> $/\.
intro N0.
intros $Domine $& $\/ $-> $/\.
intro N0.
prove nth l N0 = head l.
trivial =H2 H3.
from S (nth l N0) <= ack N0 x.
apply H5 with N0 < N1.
intros.
intros.
intros.
rewrite ack0x.
intros.
trivial.
trivial.

intros $Domine $& $\/ $-> $/\.
select 3.
instance ?3 N0.
rewrite ack0x.
apply H8 with p < n0.
intros.
trivial.

intro.
axiom H3.
intro.
axiom H3.
intro.
intro N0.

lefts H4 $& $\/.
prove \/p1:N List \x (ack p1 Domine x with p) gs.
elim H6.
trivial.
lefts H9 $& $\/.
lefts H11 $& $\/.
Import bool.
def max n p = if n <= p then p else n.
intros $& $\/.
instance ?5 max n p.

print max.

*)
