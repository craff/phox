(*
Warning: if you are a beginner with proof assistant, 
it is recommended to do the tutorial tautology.phx 
before this one.
*)

(* 
Here are some definitions, understand them,
especially the last one!
*)

def decidable A R = /\x,y:A (R x y or ~R x y).

def reflexive A R = /\x:A R x x.

def transitive A R =
  /\a,b,c:A (R a b -> R b c -> R a c).

def symetric A R =
  /\a,b:A (R a b -> R b a). 

def total A R = /\x,y:A (R x y or R y x).

def Well_founded D R =
  /\X(/\a (D a -> /\b (D b -> R b a -> X b) -> X a) -> /\a (D a -> X a)).

(*
We add one new sort and constructors for lists.
We do all this with a "magic" command : inductive data types 
(see the corresponding chapter of the documentation):
*)

Data List A =
  Nil : List A Nil
| [Cons] rInfix[3] x "::" l : A x -> List A l -> List A (x::l)
. 

(* Look all what this command do! do not think to much about it now. 
Simply ask yourself what happened when you will use lists bellow.
*)

(*
We introduce the first level of automatic detection of axioms:
if a goal is an axiom, it will be automatically solved!
*)
flag auto_lvl 1.

(*
Two interesting propositions about lists. 
Proof are already made and commented:
*)
goal /\A,B (/\x:A B x -> /\l:(List A) List B l). 
(* With inductive type, this is automated (trivial induction). *)
trivial.
save List_increasing.

goal /\A,B/\l (List A l -> List B l -> List \x (A x & B x) l). 
intro 4.
(* 
We do an induction on H := List A l. This means we use the
theorem rec.List automatically generated and add as an 
elimination rule for lists.
*)
elim H.
trivial.
(* Here trivial works, but let us learn a few more command *)
intros.
(* 
We do a case analysis on List B (x::l0). This means we use 
the theorem case.List automatically generated and added as an 
elimination rule for lists. But this isn't the default rule,
so we must indicate ourself the rule we want to use.
*)
elim H3 with [case].
(*
The fact that Nil is distinct from Cons was added as an invertible 
left rule. So this goal is trivial. left H4 would also work.
*)
trivial.
(*
The fact that Cons is injective was added as an invertible left rule. 
We use the command left to use it.
*)
left H6.
intro.
trivial.
elim H2.
trivial.
save List_conjunction.

(*
We add a binary constant for each binary predicate symbol and the axioms
defining this function:
*)
Cst insert : ('a -> 'a -> prop) -> 'a -> list['a] -> list['a].

claim insert_Nil /\R/\a (insert R a Nil = a::Nil).
claim insert_Cons_1 /\R/\a,b,l (R a b -> insert R a (b::l) = a::b::l).
claim insert_Cons_2 /\R/\a,b,l (~ R a b -> insert R a (b::l) = b:: insert R a l).

(* We tell the automated equationnal reasoning 
that it can use these axioms *)
new_equation insert_Nil.
new_equation insert_Cons_1.
new_equation insert_Cons_2.

(*
Prove totality of this function:
*)
goal /\D,R (decidable D R -> /\a:D /\l:(List D) List D (insert R a l)).
(*->*)
intros.
elim H1.
trivial.
elim H with H0 and H2.
trivial.
trivial.
(*->*)
save List_insert.

(*
We add this as an introduction rule.
-t: this is a totality theorem.
-i: the rule is invertible.
*)
new_intro -t -i insert List_insert.

(*
We use insert to define a sort function on list. 
*)
Cst sort : ('a -> 'a -> prop) -> list['a] -> list['a].

claim sort_Nil /\R (sort R Nil = Nil).
claim sort_Cons /\R,a,l (sort R (a::l) = insert R a (sort R l)).

new_equation sort_Nil.
new_equation sort_Cons.

(*
Prove totality of this function:
*)
goal /\D,R (decidable D R -> /\l:(List D) (List D (sort R l))).
(*->*)
intros.
elim H0.
trivial.
trivial.
(*->*)
save List_sort.

(*
We add this as an introduction rule.
-t: this is a totality theorem.
-i: the rule is invertible.
*)
new_intro -t -i sort List_sort.

(*
An inductive predicate expressing the fact that l' is obtained by 
adding x in l at any position.
*)
Inductive Insert x l l' =
  nil -i : /\l0 Insert x l0 (x::l0)
| cons : /\a/\l0,l1 (Insert x l0 l1 -> Insert x (a::l0) (a::l1)).

(* Two sample proofs to understand alone. *)
goal /\x /\l (~ Insert x l Nil).
intros.
intro.
elim H with [case].
trivial.
trivial.
save Insert_not_Nil.

new_elim -i -n Insert not_Nil Insert_not_Nil.

goal /\A/\x:A/\l:(List A)/\l' (Insert x l l' -> List A l').
intro 5.
elim H0.
intros.
elim H1 with [case].
trivial.
trivial.
trivial.
save Insert_List.

(* Prove these: ! *)
goal /\A/\x,l'/\l:(List A) (Insert x l' l -> A x).
(*->*)
intros.
prove $$H -> $0.
elim H0.
intro.
elim H1 with [case].
trivial.
trivial.
intro.
elim H3 with [case].
trivial.
trivial.
trivial.
(*->*)
save car_Insert.

goal /\A/\x,l'/\l:(List A) (Insert x l' l -> List A l').
(*->*)
intros.
prove $$H -> $0.
elim H0.
intro.
elim H1 with [case].
trivial.
trivial.
intro.
elim H3 with [case].
trivial.
trivial.
trivial.
(*->*)
save cdr_Insert.

(*
We use Insert to define the following predicate.
Why do we need it to prove that sort is indeed a function sorting a list ?
*)

(* 
for strange reasons, the induction rule for Equiv is not automatically proved in a reasonable time. The "-ce" (claim elim) option indicated not to try, we will do it ourselves.
*)
Inductive Equiv l l' -ce = 
  Nil -i : Equiv Nil Nil
| Cons : /\x,l1,l2,l1',l2' (
    Equiv l1 l2 -> Insert x l1 l1' -> Insert x l2 l2' -> Equiv l1' l2').

prove_claim rec.Equiv.
intros.
use $$H1 & $0.
trivial.
unfold_hyp H1 Equiv.
elim H1.
trivial =H.
trivial.
save.

(*
What is the meaning of the two following predicates ?
What do you think about the Minore predicate ?
What style difference with the previous definitions of Equiv and Insert ?
*)
def Minore D R x l = List \y (D y & R x y) l.

Inductive Sorted D R l =
  Nil -i : Sorted D R Nil
| Cons -i :  /\x:D/\l:(List D) (Minore D R x l -> Sorted D R l -> Sorted D R (x::l)).

(* We need natural numbers. *)
Import nat. 

(*
We define the length of a list to be able to do induction on it. 
*)
Cst length : list['a] -> nat.

claim length_Nil length Nil = N0.
claim length_Cons /\x,l length (x::l) = S (length l).

new_equation length_Nil.
new_equation length_Cons.

goal /\A/\l:(List A) N(length l).
trivial.
save length_total.

new_intro -t -i length length_total.

(*
A property of Insert and length to prove.
*)
goal /\x,l,l' (Insert x l l' -> length l' = S (length l)).
(*->*)
intros.
unfold_hyp H Insert.
elim H.
trivial.
trivial.
(*->*)
save length_Insert.

new_equation length_Insert.

(*
Carefully read the following proof! You will have to do others of 
the same kind.
Look at the documentation for the tactics you do not understand.
*)
goal /\D,R (decidable D R -> /\x:D/\l:(List D) Insert x l (insert R x l)).
intro 3.
local Hyp n = /\x:D  /\l:(List D) (length l = n -> Insert x l (insert R x l)).
prove /\n:N Hyp n.
intros.
elim H0.
intros.
elim H2 with [case].
trivial.
trivial.
intros.
elim H4 with [case].
trivial.
trivial.
intros.
elim G.
select 2.
intro.
trivial.
save insert_Insert.

goal /\D,R (decidable D R -> 
  /\x,x':D /\l,l':(List D) (Equiv l l' -> Equiv (x::l) (insert R x
  l'))).
trivial +insert_Insert.
save insert_Equiv.

goal /\D,R (decidable D R -> /\l:(List D) Equiv l (sort R l)).
(*->*)
intros.
elim H0.
intro Nil.
elim insert_Equiv with D and R.
axiom H1.
intros.
(*->*)
save sort_Equiv.

goal /\D,R (decidable D R -> total D R -> /\l:(List D)/\a,x:D (
  R a x -> Minore D R a l -> Minore D R a (insert R x l))).
(*->*)
intro 6.
elim H1.
intros.
trivial.
trivial.
(*->*)
save insert_Minore.

goal /\D,R (decidable D R -> total D R -> transitive D R ->
  /\x:D/\l:(List D) (Sorted D R l -> Sorted D R (insert R x l))).
(*->*)
intros.
prove /\x:D (Sorted D R l -> Sorted D R (insert R x l)).
elim H3.
trivial.
intros.
elim H9 with [case].
left H10.
lefts H14.
elim H with H8 and H10.
intro.
trivial.
intro.
trivial.
elim List_increasing with \y (D y & R x2 y)  and \y (D y & R x1 y). 
trivial =H1 H10 H8 H16.
axiom H12.
axiom H9.
intro.
trivial.
prove R x2 x1.
trivial.
elim insert_Minore.
elim H7.
axiom H13.
trivial.
(*->*)
save insert_Sorted.

goal /\D,R (decidable D R -> total D R -> transitive D R ->
  /\l:(List D) (Sorted D R (sort R l))).
(*->*)
intros.
elim H2.
trivial.
elim insert_Sorted.
trivial.
(*->*)
save sort_Sorted.

(*
The theorem 
  sort_Sorted and sort_Equiv 
express that sort is correct, isn't it ?
*)

(*
If you reached that point, let us now play by proving that
Equiv is transitive.
*)

(*
Let us start with a few lemmas:
*)
goal /\A/\l2:(List A)/\x,y/\l1,l3 (
  Insert x l1 l2 -> Insert y l2 l3 ->
   \/l2' (Insert y l1 l2' & Insert x l2' l3)).
(*->*)
intro 3.
elim H.
trivial.
intros.
elim H3 with [case].
lefts H5.
elim H4 with[case].
intro.
instance ?1 (y:: l1).
trivial.
intro.
instance ?2 l4.
left H8.
intro.
axiom H7.
intro.
left H7.
elim H4 with [case].
intro.
instance ?3 (y::(a::l0)).
intro.
intro.
intros.
axiom H5.
left H10.
apply H2 with H5 and H9.
lefts G $& $\/.
intro.
instance ?4 (a::l2').
intro.
intro.
intro.
(*->*)
save associative_Insert.

goal /\A/\l1:(List A)/\x,y/\l2,l3 (
  Insert x l2 l1 -> Insert y l3 l1 ->
   (x = y & l2 = l3) or
   \/l4 (Insert y l4 l2 & Insert x l4 l3)).
(*->*)
intro 3.
elim H.
trivial.
intros.
elim H3 with [case].
left H5.
elim H4 with [case].
lefts H7.
intro l.
trivial.
left H9.
intro r.
intro.
instance ?1 l0.
trivial.
left H7.
elim H4 with [case].
left H9.
intro r.
intro.
instance ?2 l0.
trivial.
left H11.
apply H2 with H5 and H9.
lefts G $& $\/ $or.
select 2.
intro r.
intro.
instance ?3 (a::l7).
intro.
intro.
intro.
intro l.
trivial.
(*->*)
save diamond_Insert.

goal /\A (reflexive (List A) Equiv).
(*->*)
intros.
intros.
elim H.
trivial.
trivial.
(*->*)
save Equiv_reflexive.

goal /\A (symetric (List A) Equiv).
(*->*)
intros.
intros.
unfold_hyp H1 Equiv.
elim H1.
trivial.
trivial.
(*->*)
save Equiv_symetric.

(*
One last lemma:
*)
goal /\A /\a,b,a':(List A)/\x:A (
    Equiv a b -> Insert x a' a ->
    \/b':(List A) (Insert x b' b & Equiv a' b')).
(*->*)
intro.
local Hyp n = /\a,b,a':(List A)/\x:A (length a = n ->
    Equiv a b -> Insert x a' a ->
    \/b':(List A) (Insert x b' b & Equiv a' b')).
prove /\n:N Hyp n.
intros.
elim H.
intros.
left H4.
intros.
elim H7 with [case].
trivial.
elim diamond_Insert with A and H8 and H10.
intro.
instance ?1 l2.
intros.
elim cdr_Insert with A and H11.
trivial.
trivial.
lefts H12 $\/ $&.
unfold_hyp H1 Hyp.
apply H1 with H9 and H13.
elim cdr_Insert with A and H10.
elim cdr_Insert with A and H11.
elim cdr_Insert with A and H12.
rewrite_hyp H6 -l 1 length_Insert.
apply cdr_Insert with A and H10.
left H6.
lefts G $& $\/.
elim associative_Insert with A and H15 and H11.
elim cdr_Insert with A and H11.
left H17.
intro.
instance ?2 l2'.
intros.
elim cdr_Insert with A and H18.
trivial =H16 H17 H12.
intros.
elim G with H3 and H4.
select 2.
intro.
trivial.
(*->*)
save lemme_Equiv.

(*
We can now prove the transitivity!
*)
goal /\A (transitive (List A) Equiv).
(*->*)
intros.
intros.
local Hyp n = /\a,b,c:(List A)(length a = n ->
   Equiv a b -> Equiv b c -> Equiv a c).
prove /\n:N Hyp n.
intro 2.
slh H H4.
elim H4.
intros.
elim H5 with [case].
elim H6 with [case].
trivial.
elim H0 with [case].
trivial.
apply cdr_Insert with A and H8.
left H3.
intros.
elim H7 with [case].
trivial.
apply lemme_Equiv with A and H8 and H11.
elim cdr_Insert with A and H11.
elim car_Insert with A and H11.
lefts G $& $\/.
intro.
instance ?1 l1.
instance ?2 b'.
elim H1.
elim cdr_Insert with A and H10.
elim cdr_Insert with A and H11.
rewrite_hyp H6 length_Insert.
apply cdr_Insert with A and H10.
left H6.
axiom H10.
elim  G with H and H2 and H3.
select 2.
intro.
trivial.
(*->*)
save transitive_Equiv.

