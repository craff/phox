(* ------------------------------------------------------------ *)
(*                     La logique minimale                      *)
(* ------------------------------------------------------------ *)



(* -------------------------
La construction des formules
--------------------------*)

(* 
On va définir les formules de la logique minimale. On va utiliser
les entiers comme nom de variable.

Attention: On va prouver des propriétés de la logique minimale (logique
objet) en logique du second ordre (meta-logique). Il faudra prendre
garde a ne pas mélanger les deux niveaux.

*)

Import nat.

(* 
On se donne une "sorte" qui contiendra les formules
*)
Data Form =
  var x : N x -> Form (var x)
| [implication] rInfix [4] x "|->" y : Form x -> Form y -> Form (x |-> y)
.

(* 
- rInfix 
    donne une syntaxe infix associative à droite:
    a |-> b |-> c signifie $|-> a ($|-> b c)
- [4] 
    donne la priorité (plus le nombre est petit, plus ca "colle"

(par convention on utilise > 5 pour les connecteurs, < 5 pour les
functions et 5 pour les constantes de prédicats)

*)

priority $S $var $|->.
(* 
La priorité de S étant 2, on peut écrire (sans parenthèses) :
*)
print var S N0 |-> var N0.
(*
QUESTION: 
	A quoi sert le "$"
	.......................
*)


(*-------------------
Mon premier théorème
___________________*)

(*
On peut prouver un petit théorème:
*)
goal Form (var S N0 |-> var N0).
(* 
On ouvre la définition:
*)
unfold Form.
(* 
On introduit le pour-tout:
*)
intro.
(* 
On introduit les implications:
*)
intro.
intro.
(* 
On applique des éliminations sur l'hypothèse H0
*)
elim H0.
(* 
On applique des éliminations sur l'hypothèse H et deux intros:
(intro 2. = intro. intro.
*)
elim H.
intro 2.
(* 
On applique des éliminations sur l'hypothèse H et une intro:
*)
elim H.
intro.
(* 
QED. On sauve le theorème!
*)
save mon_premier_theoreme.

(*
QUESTION:
        Que signifie ce théorème ?

QUESTION:
	Que fait elim exactement ?
	.........................
*)

(*
On pouvait faire plus court:
*)
goal Form (var S N0 |-> var N0).
(* 
Le unfold est fait automatiquement par intro ! en plus intros permet de
faire un maximum d'intro pour les connecteurs spécifiés. En plus la commande
Data a crée des règles d'introduction pour Form !

QUESTION:
        Quels sont-elles ? 
	.........................
*)
intros N Form.
save mon_premier_theoreme.

(* 
Et même encore plus court:
*)
goal Form (var S N0 |-> var N0).
trivial.
save mon_premier_theoreme.

Import list.

Inductive Prouvable C f =
  axiome :  /\f,C Prouvable (f::C) f
| affaiblissement : /\f,g,C (Prouvable C f -> Prouvable (g::C) f)
| implication_intro :
	/\f,g,C (Prouvable (f::C) g -> Prouvable C (f |-> g))
| implication_elim :
        /\f,g,C (Prouvable C (f |-> g) -> Prouvable C f -> Prouvable C g)
.

(*
Question:
        Quels-sont les termes extraits d'une preuve de "Prouveble C f" ?
        ..............
*)

(*----------------
Sémantique:
----------------*)

(*
On a besoin des lemmes suivants:
*)

claim append.associative.untyped /\l,l',l'' (l @ (l' @ l'') = (l @ l') @ l''). 
new_equation append.associative.untyped.

claim append.nil_right.untyped /\l (l @ nil = l). 
new_equation append.nil_right.untyped.

(*
Pourquoi ne peut-on les prouver ?
*)

def Force p f = /\X (
	/\f,g,p (/\p'(/\p'' X (p''@p'@p) f -> X (p'@p) g) 
		-> X (p) (f |-> g)) ->	  
        /\f,g,p (X p (f |-> g) -> X p f -> X p g)  
	-> X p f).

(* 
Question:
        Force définit une sémantique. Laquelle ?
        .............
Question:
        Quels-sont les termes extraits d'une preuve de "Force l f" ?
        .............
*)

(*
Une propriété de Force:
EXERCICE: finis la preuve
*)

goal /\p,f (Force p f -> /\p' Force (p'@p) f).
(*->*)
intros.
intros.
prove /\p' X (p' @ p) f.
elim H.
intros.
elim H0. 
intros.
elim -1 (p1'@p0') H2.
intros.
elim -1 (p2'@p'') H3.
trivial.
elim G.
(*->*)
save increasing.Force.

(*
Question: 
  As-t'on utiliser les deux lemmes ? Comment ?
Question:
  Comment pourrais-t'on se passer de ces lemmes, et à quel prix ?
*)

(*-----------------------------
La correction de la sémantique:
-----------------------------*)

(*
EXERCICE: finis la preuve
*)

goal /\f (Prouvable nil f -> /\p Force p f).
intros.
intros.
(* lemme *)
prove -head /\l,f,c (/\l' List \f (X (l'@l) f) (f::c) -> /\l' X (l'@l) f).
intros.
(*
QUESTION: 
que font les trois commandes suivantes ?
*)
elim H2 with l' and [case].
left H3.
left H5.
from H3.
(* second lemme, prove le *)
prove -tail /\l,f,c (/\l' List \f (X (l'@l) f) (f::c) -> 
			/\l' List \f (X (l'@l) f) c).
(*->*)
intros.
elim H2 with l' and [case].
left H3.
left H5.
from H4.
(*->*)
(* début de la preuve, on généralise: *)
prove /\p (/\p' List \f (X (p'@p) f) nil -> /\p' X (p'@p) f).
(*
On ne veut pas utiliser rec.Prouvable 
	(pour obtenir un terme extrait plus court !
On ouvre donc la définition a la main !
*) 
unfold_hyp H Prouvable.
(*
et on fait l'induction ! à vous de finir !
*)
elim H.
(*->*)
(* cas de l'axiome *)
intros.
elim head with H2. 
(* cas affaiblissement *)
intros.
elim H2.
elim tail with H3. 
(* cas de l'impl_introduction *)
intros.
elim H0.
intros.
elim H2 with (p0' @ p' @ p0).
intro.
intro.
elim H4.
elim H3.
(* cas de l'impl_élimination *)
intros.
elim H1.
elim H2 with (p' @ p0).
intro.
elim H4.
elim H3 with (p' @ p0).
intro.
elim H4.
elim G.
intro.
intro.
(*->*)
save Correcte.

(*-----------------------------
La complétude de la sémantique:
-----------------------------*)

(*
on a besoin des listes non typées:
*)

def UList p = List (\x True) p.

(*
définition d'une fonction sur les listes:
*)

Cst liat : list['a] -> list['a].
claim liat0 liat nil = nil.
claim liat1 /\x liat (x:: nil) = nil.
claim liat2 /\p,p',x liat (p@(x::p')) = p@liat(x::p').
new_equation liat0.
new_equation liat1.
new_equation liat2.

(*
QUESTION: que fait-elle ?
*)

(*
Voici la preuve de totalité de cette fonction:
*)

goal /\p (UList p -> UList (liat p)).
intros.
elim H.
(*
on réécrit une équation à la main:
*)
rewrite liat0.
intro.
prove /\y (UList (liat l') -> UList (liat (y:: l'))).
elim H1.
intros.
rewrite liat1.
intro.
intros.
from UList (liat (y::nil @  a0 :: l0')).
rewrite liat2.
from UList (y::liat (a0 :: l0')).
intro.
intro.
from H6.
elim G.
from H2.
save liat.total.
new_intro -t liat liat.total.

(*
Question:
	Combien existe-t'il de méthode pour 
	faire du raisonnement équationel ?
*) 
(*
un premier lemme:
EXERCICE: prouves le !
*)
goal /\p,x (UList (p@ x::nil) -> UList p).
(*->*)
intros.
from UList (liat (p@ x::nil)).
intro.
from H.
(*->*)
save lemma1.

(*
Le lemme dont on a vraiment besoin:
EXERCICE: prouves le !
*)
goal /\p,q (UList q -> UList (p@q) ->  UList p).
(*->*)
intro 3.
prove /\p (UList (p @ q) -> UList p).
elim H.
trivial.
intros.
elim lemma1 with a.
elim H2.
from H3.
elim G.
(*->*)
save lemma2.

(*
Question: 
	que fait le programme extrait de cette preuve ?
Question: 
	pourquoi avait-on besoin de "liat" ?
*)

(*
La complétude, enfin !
EXERCICE: finis le preuve !
*)
goal /\f (/\p:<list[form] Force p f -> Prouvable nil f).
(*->*)
intros.
elim -2 \C,f (UList C -> Prouvable C f) H.
intros.
intro implication_intro.
elim H0.
intros.
prove UList p''.
elim lemma2.
next 1.
from H2.
trivial.
elim G.
intro axiome.
intro affaiblissement.
from H5.
trivial.
intros.
intro implication_elim.
elim H0.
from H2.
elim H1.
from H2.
intro.
(*->*)
save Complete.



