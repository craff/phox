(*
===========================================================================

            Un tutorial d'introduction à la logique et à PhoX

                         C. Raffalli Décembre 1997

                          Mise à jour Octobre 2000
		            
===========================================================================
*)

(*

Le but de cet exemple est double: 
  - on introduit progressivement les commandes les plus simples du
    système PhoX sur des exemples simples de logique propositionnelle ou
    du calcul des prédicats. 
  - Ces exemples peuvent aussi servir d'illustration pour une introduction
    à la logique auprès des étudiants. 

Le principe général qui préside la construction des preuves est le suivant:
  - On utilise la commande "goal" pour indiquer la formule à prouver.
  - A chaque instant on a un certain nombre de buts à prouver dont le
    premier est le but "courant" (but numéro 1). On peut afficher tous les
    buts à l'aide de la commande "goals." (bouton State sous Emacs).
    Chaque but se compose d'hypothèses qui sont automatiquement nommées (ou 
    peut aussi nommer soit même les hypothèses) et d'une conclusion que l'on 
    doit prouver en utilisant ces hypopthèses.
  - On utilise des commandes qui indiquent la ou les règles logiques que l'on
    désire appliquer. Le système construit alors le ou les nouveaux buts à
    prouver (si il y en a).
  - Quand il n'y a plus aucun but la preuve est terminée et on peut la
    sauvegarder en utilisant la commande "save".
 
*)

(*

Pour lancer PhoX, ouvrez un fichier .phx sous XEmacs avec ProofGeneral,
ce que vous venez de faire si vous lisez ce fichier !

Sous XEmacs, on peut entrer directement une commande en cliquant sur
le bouton "next", on en tapant "LineFeed" ou "Control-J". On peut
aussi entrer une partie d'un fichier en se plaçant au bon endroit et
en cliquant sur le bouton "goto".  Les lignes qui ont déjà été entré
apparaîssent alors sur fond bleu. On peut revenir en arrière avec le
bouton "undo".

Dans certain cas, après de nombreux "undo"; le système est "perdu"
(cela est du à des problèmes entre ProofGeneral et PhoX). On doit alors
utiliser le bouton "restart" et se replacer où l'on en était avec le bouton 
"goto".

Lorsque l'on est en train de faire une preuve, on peut utiliser le
bouton "State" pour afficher les buts à prouver.

Les premiers exercices utilisent les constantes "A", "B" et "C" ainsi que
l'implication "->", la conjonction "&", la disjonction "or", la négation "~"
et le faux "False".

Note: "~ A" est défini comme "A -> False".

On doit définir les variables propositionnelles A, B, C.
Pour cela entrez les lignes qui suivent:

*)

Cst A : prop.
Cst B : prop.
Cst C : prop.

(*
On peut maintenant prouver une formule:
*)

goal A -> A.

(* 

La commande "goal" indique à PhoX que l'on veut commencer la preuve de
la formule "A -> A" (il ne faut pas oublier le point et le retour
chariot qui suit).

PhoX répond :

|- A -> A

Le signe "|-" précède la formule à prouver

On peut alors indiquer que l'on veut utiliser une règle
d'introduction:
*)

intro.

(*
PhoX répond :

1 goal created.
New goal is:

H := A
   |- A

La ligne H0 := A indique que l'on a en hypothèse la formule "A". "H0"
est le nom de cette hypothèse. La formule à prouver sous cette hypothèse est
"A".

PhoX a automatiquement détecté quelle règle d'introduction appliquer car la
formule etait une implication et qu'il n'y a qu'une règle d'introduction pour
ce connecteur logique.

Il suffit alors de terminer la preuve par un axiome:
*)

axiom H.

(*
PhoX répond:

0 goal created.
proved

La preuve est finie!

On peut maintenant sauvegarder cette preuve en tapant:
*)

save mon_premier_theoreme.

(*
PhoX répond:

Building proof .... 
Typing proof .... 
Verifying proof .... 
Saving proof ....
mon_premier_theoreme = A -> A : Theorem

PhoX construit et revérifie la preuve, puis la sauvegarde dans la machine
sous le nom indiqué.

Prouvons une formule un peu plus compliquée:
*)

goal ((A & B) -> C) -> A -> B -> C  .

(* 
On pourrait tapez trois fois "intro.", on peut aussi tapez "intro 3.":
*)

intro 3.

(*
PhoX répond:

1 goal created.
New goal is:

H := A & B -> C
H0 := A
H1 := B
   |- C

On veut maintenant utiliser l'hypothèse "H" pour prouver "C" à l'aide de
l'élimination d'une implication. Il suffit d'écrire:

*)

elim H.

(*
PhoX a essayé d'appliquer des règles d'élimination pour obtenir la formule "C"
à partir de "H" et il n'y avait qu'une seule possibilité (ce n'est pas
toujours le cas).

De la même manière que précédemment, on applique une règle d'introduction:
*)

intro.

(*
PhoX répond:

2 goals created.

New goals are:
goal 1/2
H := A & B -> C
H0 := A
H1 := B
   |- A

goal 2/2
H := A & B -> C
H0 := A
H1 := B
   |- B

On a deux buts à prouver car la règle d'introduction de la conjonction
a deux prémisses. Le premier but affiché est le but courant. On peut
le résoudre par un axiome, ainsi que le second but (qui devient le
but courant une fois l'autre résolu). On sauve alors la preuve.

*)

axiom H0.
axiom H1.
save mon_second_theorem.

(*

Remarque: On, vient de voir deux types de règles:

- Les règles d'introduction qui permettent de destructurer la
  conclusion d'un but.  
- Les règles d'élimination qui permettent d'utiliser les hypothèses 
  (ou tout autre formule qu'il faudra alors prouver) pour déduire 
  d'autres formules. Avec ce point de vue, les axiomes sont un cas 
  particulier d'élimination.  
- On verra bientôt aussi les règles gauche qui permettent de
  destructurer les hypothèses d'un but sans transformer la conclusion.


exercice: finir la preuve suivante (en remplaçant les "...." par les commandes
adéquates):

*)

goal ((((A -> B) -> A) -> A) -> B) -> B.
(*->*)
intro.
elim H.
intro.
elim H0.
intro.
elim H.
intro.
axiom H1.
(*->*)
save th3.

(*
On peut aussi prouver la formule suivante:
*)

goal ((A or B) -> C) -> A -> C.
intro 2.
elim H.

(*
à ce point de la preuve, on peut écrire "intro.":
*)
intro.

(*
PhoX répond:

1 goal created.
New goal is:

H0 := A or B -> C
H1 := A
   |- B

et on ne pourra pas finir la preuve ! que s'est il passé ? il y a deux
règles d'introduction pour la disjonction et PhoX a choisi la
mauvaise. On peut écrire dans ce cas "intro l" pour préciser que l'on
veut la règle quit dit "A |- A or B" (l pour left). Pour revenir en
arrière, on utilise "undo." et on remplace "intro" par "intro l". On
peut alors finir la preuve: *)

undo.
intro l.
axiom H0.
save th4.

(*

Exercice: finir la preuve suivante:

*)

goal (A or B -> C)  ->  (A -> C) & (B -> C).
intro.
intro.
intro.
elim H.
(*->*)
intro l.
axiom H0.
intro.
elim H.
intro r.
axiom H0.
(*->*)
save th5.

(*

Le même problème peut se poser avec l'élimination de la conjonction:
prouvons:

*)

goal (B -> C) & (A -> C)  ->  (A or B -> C).
intro 2.

(*

PhoX répond:

H0 := (A -> C) & (B -> C)
H1 := A or B
   |- C

On peut faire alors une élimination de la disjonction en tapant:

*)

elim H0.

(*
On a alors les deux buts suivant à prouver:

2 goals created.
New goals are:

H0 := (A -> C) & (B -> C)
H1 := A or B
H2 := A
   |- C


H0 := (A -> C) & (B -> C)
H1 := A or B
H2 := B
   |- C

Dans chacun des 2 buts, il faut faire une élimination de la conjonction sur
H. puis une élimination de l'implication. Mais il faut choisir le bon côté
pour la première élimination.  on fait cela en tapant:

*)

elim H with [r].
axiom H1.
elim H with [l].
axiom H1.
save th6.

(*

L'option "with [l]" indique de prendre la règle qui dit "A & B |- A"
pour la première élimination. 

On pouvait aussi faire la même preuve en utlisant des règles gauches:

*)

goal (B -> C) & (A -> C)  ->  (A or B -> C).
intro 2.
left H.
left H0.
elim H1.
axiom H0.
elim H.
axiom H0.
save th6.

(*

La commande left, permet d'appliquer une règle gauche (règle qui ne transforme
que les hypothèses) pour les connecteurs conjonction et disjonction.

Exercice: prouver les formules suivantes:
*)


goal (A -> C) or (B -> C)  ->  (A & B) -> C.
(*->*)
intros.
left H.
elim H.
elim H0.
elim H.
elim H0.
(*->*)
save th7.

goal (A -> B & C) -> (A -> B) & (A -> C).
(*->*)
intro 3.
elim H.
axiom H0.
elim H.
axiom H0.
(*->*)
save th8.

(*

PhoX connait aussi la négation noté " ~A " pour "non A" et l'absurde noté
"False".

PhoX permet alors de faire de la logique classique en utilisant la
démonstration par l'absurde ou le tiers exclu. Pour faire une
démonstration par l'absurde, on peut utiliser la commande
by_absurd. comme l'illustre la preuve suivante:

*)

goal ~ (A & B) -> ~A or ~B.
intro.
by_absurd.
intro l.
intro.
elim H0.
intro r.
intro.
elim H.
intro.
axiom H1.
axiom H2.
save th9.

(*

Remarque: lorsqu'une hypothèse se termine par une disjonction ou une négation,
on peut toujours appliquer la commande "elim", Ceci rend les preuves plus
difficiles car on a plus de choix. 

On peut aussi faire des preuves par l'absurde en utilisant le tiers exclu:

excluded_middle = /\X (X or ~ X) : Theorem

Il suffit de taper "elim excluded_middle with A" pour distinguer les cas
A vrai et A faux.

Remarque: Le /\X indique que ce théorème est valable pour toutes formules X.

L'utilisation du tiers exclu sera surtout utilse en calcul des prédicats.

Terminer la preuve suivante:

*)

goal (A & B -> C) -> (A -> C) or (B -> C).
intro.
by_absurd.
(*->*)
intro l.
intro.
elim H0.
intro r.
intro.
elim H.
intro.
axiom H1.
axiom H2.
(*->*)
save th10.

(*

On peut savoir quels axiomes utilise la preuve d'un théorème en tapant:

*)

depend th10.
depend th3.

(*

On va maintenant utiliser le calcul des prédicats qui permet de
prouver les proprités "d'objets" qui sont représentés par des
"termes".

Les termes sont contruits a partir de variables "x", "y" ... et à
l'aide de symbole de fonction. Si "f" est un symbole de fonction
unaire et si "t" est un terme alors "f t" est un terme. Si "g" est un
symbole de fonction binaire et si "t ,u" sont deux termes alors "g t u" est
un terme.

On peut alors construire des formules en appliquant des constantes de
prédicats aux termes. Si "P" est une constante de prédicat
unaire et si "t" est un terme alors "P t" est une formule. Si "R" est une
constante de prédicat binaire et si "t, u" sont deux termes alors "R t u" est
une formule.

On peut aussi construire des formules utilisant des quantificateur:
"/\x A x" signifie "pour tout x on a (A x)" et "\/x A x" signifie "il
existe x tel que (A x)". 

Remarque: si l'on ecrit "E x" cela veut dire que "x" peut apparaître
dans "E". Si l'on écrit "A", "x" ne peut pas apparaître dans "A".
 
Remarque: on rencontre aussi l'abréviation "/\x:D E x" qui veut dire 
"/\x (D x -> E x)" et l'abréviation "\/x:D E x" qui veut dire 
"\/x (D x & E x)".

Les exercices qui suivent utilisent les constantes de prédicat unaire
"D x" et "E x", les constantes de prédicat binaire "T x y" et "R x y"
ainsi que le symbol de fonction unaire "f x":

*)

Sort term.
Cst D : term -> prop.
Cst E : term -> prop.
Cst R : term -> term -> prop.
Cst T : term -> term -> prop.
Cst f : term -> term.

(* 
Cst D : term -> prop. veut dire que D prend un terme en argument et
donne une proposition comme résultat: c'est bien la définition d'une
constante de prédicat unaire.

Entrez ces deux preuves:

*)

goal /\x (D x & E x) -> /\x D x & /\x E x.
intro.
intro.
intro.
elim H.
intro.
elim H.
save th11.

goal \/x (D x or E x) -> \/x D x or \/x E x.
intro.
elim H.
elim H0.
intro l.
intro.
instance ?1 x.
axiom H1.
intro r.
intro.
instance ?2 x.
axiom H1.
save th12.

(*

Exercice: 

Comprenez les deux preuves précédentes vous-même à partir de la
connaissance que vous avez des règles logiques. Remarquez que
l'introduction d'un "il existe" introduit une variable inconnue notée
"?n" dont on doit trouver la valeur. C'est aussi le cas de
l'élimination d'un "pour-tout", mais souvant la tactique "elim" devine
la valeur de cette inconnue. D'ailleurs dans la preuve précédente, on
pouvait se passer de la commande "instance", la tactique "axiom"
aurait aussi deviné la valeur des inconnues.

On remarque qu'il y a en fait deux types de variables:
  - Les variables dites existentielles ("x", "y", ...) (introduite par 
    l'élimination d'un quantificateur existentiel "\/x" ou
    l'introduction d'un quantificateur universelle "/\x"). Ce sont des 
    constantes dont les seules propriétés sont données par les 
    hypothèses de chaque buts. On ne peut pas changer "la valeur de
    ces variables"
  - Les variables universelles ("?1", "?2", ...) (introduite par 
    l'élimination d'un quantificateur universelle "/\x" ou
    l'introduction d'un quantificateur existentiel "\/x"). Ce sont des
    variables dont on peut choisir la valeur à l'aide de la commande
    "instance" afin de finir une preuve. 
  
Remarque les règles logiques introduisent des contraintes de la forme
  La variable "?1" ne peut pas utiliser la constante "x"

Ces contraintes peuvent être affichées grâce à la commande
"constraints". Une bonne illustration de ce phénomène consiste à
essayer de prouver la formule "\/x R x -> /\x R x". 

Ces contraintes peuvent aussi empêcher de terminer une preuve, si
on applique certaines règles dans un ordre inadéquate.

Exercice: 

Prouver les théorèmes suivant (en utilisant la logique classique
seulement quand c'est nécéssaire):

*)

goal \/x (D x & E x) -> \/x D x & \/x E x.
(*->*)
intro.
left H.
left H.
intro 2.
axiom H.
axiom H0.
(*->*)
save th13.

goal \/x (B & D x) -> \/x D x & B.
(*->*)
intro.
left H.
left H.
intro.
intro.
axiom H0.
axiom H.
(*->*)
save th14.

goal /\x D x or /\x E x -> /\x (D x or E x).
(*->*)
intro.
left H.
intro.
intro l.
elim H.
intro.
intro r.
elim H.
(*->*)
save th15.

(*

L'exercice suivant montre l'utilisation de la commande "prove" et des
lois de De Morgan (il faut finir la preuve ...) :

*)

goal (/\x D x -> \/x E x) -> \/x (D x -> E x).
intro.
elim excluded_middle with  /\x D x.
select 2. (* change le but courant *)
rewrite_hyp H0 demorgan.
(*->*)
left H0.
intro 2.
elim H0.
axiom H1.
elim H.
axiom H0.
intro 2.
instance ?2 x.
axiom H1.
(*->*)
save th16.

(*

Exercice: Prouver les formules suivantes:

*)

goal \/x /\y (D x -> D y).
(*->*)
elim excluded_middle with /\x D x.
intros.
intros.
elim H.
rewrite_hyp H demorgan.
left H.
intros.
intros.
elim H.
axiom H0.
(*->*)
save th17.

goal /\x \/y \/z (D x -> R x y & T x z) <-> 
 (/\x \/y  (D x -> R x y) & /\x \/y (D x -> T x y)).
(*->*)
intros.
intros.
intros.
intros.
apply H with x.
lefts G.
intros.
intros.
elim H0.
axiom H1.
intros.
apply H with x.
lefts G.
intros.
intros.
elim H0.
axiom H1.
intros.
left H.
apply H with x.
left G.
apply H0 with x.
left G.
intros.
intros.
intros.
elim H1.
axiom H3.
elim H2.
axiom H3.
(*->*)
save th18.

Cst a : term.
Cst b : term.

goal /\x /\x' \/y (R y x & R y x') ->
     /\x (f x = a or f x = b) ->
        /\x \/y (R y x & f y = a) or /\x \/y (R y x & f y = b).
(*->*)
intros.
by_absurd.
rewrite_hyp H1 demorganl.
lefts H1 $& $\/.
apply H with x and x0.
lefts G $& $\/.
apply H2 with H3.
apply H1 with H4.
elim H0 with y.
elim G0.
axiom H5.
elim G.
axiom H5.
(*->*)
save th19.

