(* Le but est de montrer que dans un anneau commutatif tout idéal maximal est
premier et que la réciproque est vraie si l'anneau est principal (donc
intègre).

Remarque: l'existence d'un opposé pour l'addition ne sert pas dans la preuve.

Voici une preuve informelle de ce résultat :

- sens direct : (on montre d'abord le lemme : si I est un ideéal
  maximal et x n'appartient pas à I, alors il existe
  i dans I et a tq i+ax=1. En effet, comme I est maximal, l'idéal
  engendré par I et x doit contenir 1)
  Soit I maximal et xy dans I. Si ni x ni y ne sont dans I alors, par le
  lemme, on a i+ax=1 et j+by=1. En faisant
  le produit et en utilisant le fait que I est un idéal et que xy
  appartient à I on déduit que 1 est dans I.
  Contradiction.
- réciproque : Soit I engendré par p premier. Soit J= engendré par q
  contenant I. On a donc p=qx. Comme I est premier, q appartient à I
  (et donc J=I) ou x appartient à I. Alors x=py et donc p=pqy. Comme A
  est integre p=0 (et donc I est réduit à 0) ou qy=1 et J=A.  cqfd.

*)

(* PhoX détectera automatiquement les axiomes *)
flag auto_lvl 1.

(* une sorte pour les éléments de l'anneau *)
Sort ringelt.

(* La somme et le produit avec les priorités usuelles *)
Cst lInfix[4] x"+"y  : ringelt → ringelt → ringelt.
Cst lInfix[3] x"×"y  : ringelt → ringelt → ringelt.

(* Les deux éléments neutres *)
Cst  zero : ringelt.
Cst un : ringelt.

(* Les propriétés d'un (semi) anneau *)
claim plusassoc ∀x,y,z  x+(y+z)=x+y+z.
claim pluscom ∀x,y x+y=y+x.
claim multassoc ∀x,y,z x×(y×z)=x×y×z.
claim multcom ∀x,y x×y=y×x.
claim eltabs ∀x (x×zero=zero ∧ zero×x=zero).
claim eltneutrezero ∀x (x+zero=x ∧ zero+x=x).
claim eltneutreun ∀x (x×un=x ∧ un×x=x).
claim distributivite ∀a,x,y a×(x+y)=a×x+a×y.
claim distributiviter ∀a,x,y (x+y)×a=x×a+y×a.

(* On indique à PhoX d'utiliser ces équations pour le
raisonnement automatique *)
new_equation plusassoc.
new_equation pluscom.
new_equation multassoc.
new_equation multcom.
new_equation eltabs.
new_equation eltneutreun.
new_equation eltneutrezero.
new_equation distributivite.
new_equation distributiviter.

(* On pourra taper "rewrite calcul" pour simplifier en utilisant tous les
axiomes sauf la distributivité *)
def_thlist calcul = eltabs eltneutreun eltneutrezero  plusassoc multassoc.

(* On pourra taper "rewrite developpe" pour simplifier en utilisant tous les
axiomes *)
def_thlist developpe = eltabs eltneutreun eltneutrezero  plusassoc multassoc distributivite distributiviter.

(* Les définitions utiles *)
def ideal I = ∀x,y:I (I (x+y)) ∧ ∀x:I ∀z (I (z×x)) ∧ I zero.

def principal I = ∃a ∀x (I x ↔ ∃y x = a×y).

def Infix[5] I "⊂" J = ∀x:I J x.

def maximal I = ideal I ∧ ¬(I un) ∧ ∀J (ideal J ∧ I ⊂ J → J ⊂ I ∨ J un).

def premier I = ideal I ∧ ¬(I un) ∧ ∀x,y ((I (x×y)) → I x ∨ I y).

(* on prouvera ce lemme après le théorème *)
claim lemme ∀I:ideal ∀x (maximal I →  ¬ I x → ∃i:I ∃a (i+a×x=un)).

(* le sens direct du théorème *)
goal ∀I:ideal (maximal I → premier I).
(*→*)
intros.
unfold premier.
intros.
lefts  H0.

intro 3.
by_absurd.
rewrite_hyp H2 disjunction.demorgan.
left H2.
apply lemme  with I and H2.
left G.
left H4.
left H5.

apply lemme  with I and H3.
left G.
left H6.
left H7.
prove I un.
from I (un×un).
from I ((i+a×x)×(i0+a0×y)).
rewrite developpe.
lefts H.
elim H.
elim H.
elim H.
elim H8 with H4.
elim H8 with H4 .
elim H8 with H6.
elim H8 with H1.
lefts H0.
elim H8.
(*→*)
save thm1.

(* encore deux définitions *)
def integre = ∀x,y,a (a×x=a×y → a=zero ∨ x=y).
def Aprincipal =  integre ∧ ∀I (ideal I  → principal I).

(* la réciproque du théorème *)
goal Aprincipal →
     ∀I:ideal ((∃x:I ¬x=zero) → premier I → ¬ I un → maximal I).
(*→*)
intro.
left H.
intros.
intros.
intro 2.
left H5.
prove principal I.
apply H0 with H1.
prove principal J.
apply H0 with H5.
left G.
left G0.
rename a p.
rename a0 q.
prove I p.
trivial = H7.
prove J q.
trivial = H8.
prove J p.
elim H6.
elim H8 with G1.
rename y x.
lefts H3.
apply H11 with I (q × x).
axiom G.
elim G2.
intro l.
intros.
elim H7 with H12.
elim H8 with H13.
elim H7 with [r].
intro.
instance ?1 y × y0.
intro.
elim H7 with H12.
prove  x × un = x × (q × y).
intro.
apply integre with G3.
left G4.
prove p = zero.
intro.
left H2.
left H2.
elim H15.
elim H7 with H2.
intro.
intro r.
elim H8 with [r].
intro.
axiom H14.
(*→*)
save thm2.

(* definition nécessaire à la preuve du lemme *)
def engendre I x y = ∃i:I ∃a (y=i+a×x).

(* première propriété de engendre *)
prop lemme1 ∀I:ideal ∀x ideal (engendre I x).
(*→*)
intros.
lefts H.
intros.
intros.
rename x0 z.
lefts H2 $∧ $∃ engendre.
rename a j.
rename i a.
lefts H3 $∧ $∃ engendre.
rename i b.
rename a0 i.
rewrite H4 H5.
intros engendre $∧ $∃.
select 2.
instance ?2 j + i.
instance ?1 a + b.
rewrite developpe.
intro.
elim H.
intros.
lefts H2 $∧ $∃ engendre.
rewrite H3.
intros engendre $∧ $∃.
select 2.
instance ?4 z×a.
instance ?3 z×i.
intro.
elim H0.
intros engendre $∧ $∃.
axiom H1.
intro.
(*→*)
save.

(* seconde propriété de engendre (triviale) *)
prop  lemme2 ∀I,x I ⊂ (engendre I x).
trivial.
save.

(* troisième propriété de engendre (triviale) *)
prop  lemme3 ∀I:ideal ∀x engendre I x x.
trivial.
save.

(* preuve du lemme *)
prove_claim lemme.
(*→*)
intros.
local J = engendre I x.
prove ideal J.
elim lemme1.
prove I ⊂ J.
elim lemme2.
prove J x.
elim lemme3.
apply H0 with G ∧ G0.
intro.
elim G2.
elim H1.
elim H2.
elim H2.
left H3.
left H4.
intro 2.
axiom H3.
intro 2.
(*→*)
save.
