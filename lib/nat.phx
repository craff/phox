(*header 1998/03/16

	title = "Natural numbers (second part)"
	author = "Christophe Raffalli and Paul Roziere"
	institute = "Equipe de Logique, Université Chambéry, Paris VII"
*)
flag auto_lvl 2.


Use (* second order definition of $N *) nat_def.


(** Definition of functions on natural numbers. *)

(*texte
Warning: In this section we define  basic functions on natural
numbers. These definitions are included in the module
#nat.phx#. You can also use the module #nat_ax.phx# where
they are replaced by axioms. In general, you should
use the first module. But if you want to use theorems on natural numbers
on a structure isomorphic to natural numbers (like the positive
integers!), then you should use the module #nat_ax.phx#.
*)

(*** Definition by induction. *)

def (* graph of a function defined by induction *)
    def_rec_P.N a f n z = ∀X (
	X N0 a →
	∀y:N ∀r (X y r  → X (S y) (f y r)) → X n z).
tex_syntax def_rec_P.N Math "\\text{\\rm DEF}_{\\rm I\\hspace{-0.2em}N}^{rec}".

(*texte
The predicate [ def_rec_P.N a f x z ] defines by induction the graph of
the function which to  [ x ] associate [ z ] using [ a ] as
base case (when [ x = N0 ]) and [ f ] for the successor case.
*)

Local lemma (* The predicate [ def_rec_P.N] defines a function *) def_rec_unique.N
      ∀a,f,n (N n → ∃!z def_rec_P.N a f n z).
intros.
elim H.
intro.
trivial.
intros.
elim -1 λx,z (N0 = x → z = a) H0.
trivial.
trivial.
trivial.
left H1.
intro.
trivial.
intros.
elim -1 λx,z' (def_rec_P.N a f x z' ∧ (x = S y → z' = f y z)) -4 [s] H3.
trivial.
intros.
left H5.
intro.
trivial.
intros.
left H7.
prove r = z.
elim H2.
intro.
intro.
save.




def (* function defined by induction *)
	def_rec.N a f n = Def λz (def_rec_P.N a f n z).
tex_syntax def_rec.N Math "\\text{\\rm def}_{\\rm I\\hspace{-0.2em}N}^{rec}".

(*texte
Using the definite description, we can introduce a function symbol
[ def_rec.N a f ] for any definition by induction on natural numbers.
*)

(*fact Basic properties of [ def_rec.N ] *)
fact def_rec.N0.N ∀f∀a def_rec.N a f N0 = a.
intros.
elim Def.lemma.
elim def_rec_unique.N.
intro.
intros.
save def_rec.N0.N.

new_equation def_rec.N0.N.

fact def_rec.S.N ∀f∀a∀n:N def_rec.N a f (S n) = f n (def_rec.N a f n).
intros.
elim Def.lemma.
elim def_rec_unique.N.
intro.
prove def_rec_P.N a f n (def_rec.N a f n).
trivial +def_rec_unique.N.
trivial.
save def_rec.S.N.

new_equation def_rec.S.N.
(*endfact *)

close_def def_rec.N.

(*note
The previous proposition is proved using properties of the
definite description operator.
*)

fact (* Totality of a function defined by induction *) def_rec.total.N
		 ∀X∀f:(N ⇒ X ⇒ X)∀a:X∀n:N  X (def_rec.N a f n).
intros.
trivial.
save def_rec.total.N.

new_intro -t rec_def def_rec.total.N.

(*texte
Application : In the following section we will define by induction
addition, multiplication and exponentiation *)

(** Some very usual functions. *)

(*** Addition. *)

def (* addition *) lInfix[3.5] x "+" y = def_rec.N y (λn,r S r) x.
(* x + y = def_rec.N y (λn,r S r) x *)
tex_syntax $+ lInfix[3.5] x "+" y.

(*fact Basic properties *)
fact add.lN0.N ∀y:N (N0 + y = y).
trivial.
save add.lN0.N.
new_equation add.lN0.N.

fact add.lS.N ∀x,y:N ((S x) + y = S (x + y)).
trivial.
save add.lS.N.
new_equation add.lS.N.
(*endfact *)
close_def $+.


(*** Multiplication. *)

def (* multiplication *) lInfix[3.0] x "×" y = def_rec.N N0 λn,r (r + y)
x.
(* x × y = def_rec.N N0 λn,r (r + y) *)
tex_syntax $× lInfix[3.0] x ! "." ! y.

(*fact Basic properties *)
fact mul.lN0.N ∀y:N (N0 × y = N0).
trivial.
save mul.lN0.N.
new_equation mul.lN0.N.

fact mul.lS.N ∀x,y:N ((S x) × y = x × y + y).
trivial.
save mul.lS.N.
new_equation mul.lS.N.
(*endfact *)

close_def $×.

(*** Exponentiation. *)

def N1 = S N0.
goal N N1. trivial. save N1.total.N. new_intro -i -t N1 N1.total.N.
tex_syntax N1 Math "1".

def (* exponentiation *)
	Infix[2.5] x "^" y %as $^ y x = def_rec.N N1 λn,r (r × x) y.
(* x ^ y = def_rec.N N1 λn,r (x × r) y *)
tex_syntax $^ Infix[2.5] x ! "^" ! "{" ! y ! "}"  %as $^ y x.

(*fact Basic properties *)
fact exp.rN0.N ∀x:N x^N0 = N1.
trivial.
save.
new_equation exp.rN0.N.


fact exp.rS.N ∀x,y:N x^(S y) = x^y × x.
trivial.
save exp.rS.N.
new_equation exp.rS.N.
(*endfact *)
close_def $^.


(*** Predecessor. *)

(*texte
We will define the predecessor as a partial function (if we define it
as a total function, we can not make it coincide with the predecessor
on integer when we consider natural numbers as a ⊂ of integers).
*)

def (* graph of predecessor *) predP x z = N z ∧ x = S z.

lemma (* [predP] defines a partial function *) predP_unique
		 ∀x:N ∃!z (predP (S x) z).
intros.
intro.
trivial.
trivial.
Local save.

(*texte
Using the definite description operator, we can define the
predecessor as follows. *)

def (* predecessor *) Prefix[2] "P" n = Def λz(predP n z).
(* P n = Def λz(predP n z) *)
tex_syntax $P Prefix[2] "\\text{\\rm P}" n.

fact (* Basic property of predecessor *) pred.rS.N ∀n:N P (S n) = n.
trivial 6 +predP_unique.
save pred.rS.N.
new_equation pred.rS.N.

close_def $P.

(*** Subtraction. *)

def (* subtraction *) lInfix[3.5] x "-" y = def_rec.N x λn,r (P r) y.
(* x - y = def_rec.N x λn,r (P r) y *)

def (* inferior ∨ equal *)
	Infix[5.0] x "⩽" y = ∀X (X x → ∀z (X z → X S z) → X y).
(* x ⩽ y = ∀X (X x → ∀z (X z → X S z) → X y) *)
tex_syntax $⩽ Infix[5] x "\\leq" y.

(*note see module  #nat_ax.phx#,  section ordering, for definitions of
orders on natural numbers *)


(*fact Basic properties *)
fact sub.rN0.N
	∀x:N x - N0 = x.
trivial.
save.
new_equation sub.rN0.N.


fact sub.S.N
	 ∀x,y:N (y ⩽ x → (S x) - (S y) = x - y).
intro 2.
elim H.
intros.
elim H0.
intro.
rewrite $- def_rec.S.N def_rec.N0.N.
rewrite_hyp H3 $- def_rec.S.N def_rec.N0.N.
intro.
intro 2.
elim H2.
trivial.
intros.
rewrite $- def_rec.S.N def_rec.N0.N.
rewrite_hyp H4 $- def_rec.S.N def_rec.N0.N.
rewrite -nc H4.
intro.
trivial =H5.
save.
new_equation sub.S.N.
(*endfact *)
close_def $-.

Use -n nat_ax.
