(* $State: Exp $ $Date: 2006/02/24 17:01:52 $ $Revision: 1.15 $ *)
(* About the axiom of choice *)

(*header
	title = "About the axiom of choice"
	author = "Christophe Raffalli"
	institute = "Paris VII \\& Paris XII university"
*)

claim AC
  /\Q (\/z Q z -> Q (Def Q)).

def Def2_1 Q = Def (\x \/y (Q x y)).
def Def2_2 Q = Def (\y (Q (Def2_1 Q) y)).

fact AC2
  /\Q (\/x,y (Q x y) -> Q (Def2_1 Q) (Def2_2 Q)).
intros.
prove \/y (Q (Def2_1 Q) y).
elim AC.
axiom H.
elim AC. 
axiom G.
save.

Use set.
Use bin_rel.

def Chaine X R C =
  \/x C x & C subset X & /\x,y:C (R x y or R y x). 

flag auto_lvl 1.

theorem Zorn
  /\X,R (\/x X x -> order X R -> 
	 /\C (Chaine X R C -> \/m:X/\y:C (R y m)) ->
         \/M:X/\x:X (R M x -> M = x)).
intros.
by_absurd.
rewrite_hyp H2 demorganl.

prove /\C (Chaine X R C -> \/m:X /\y:C (R y m & y != m)).
intros.
apply H1 with H3.
lefts G $& $\/.
apply H2 with H4.
lefts G $& $\/.
intros $& $\/.
axiom H6.
intros.
intro.
trivial.
intro.
prove R x m.
elim H5.
axiom H9.
elim H8.
trivial.

local f C = Def (\m (X m & /\y:C  (R y m & y != m))).
prove /\C:(Chaine X R) (X (f C) & /\y:C  (R y (f C) & y != (f C))).
intros.
elim AC.
elim G.

local Succ C = C union \x (x = f C).

prove /\C (Chaine X R C -> Chaine X R (Succ C)).
slh G0 H0.
intros.
lefts H.
intros.
trivial.
trivial.
intros.
left H3.
select 2.
intro r.
left H4.
select 2.
trivial.
trivial.
left H4.
select 2.
intro l.
trivial.
trivial =H2 H3 H4.

prove /\F (Chaine (Chaine X R) $subset F -> Chaine X R (Union F)).
intros.
intro.
lefts H3 Chaine $& $\/.
apply H4 with H3.
trivial.
intro.
trivial = H3.
intros.
left H4.
left H5.
left H4.
left H5.
apply H3 with H4 and H5.
left G2.
select 2.
prove Chaine X R X0.
trivial = H3 H4.
elim G2 with H6.
elim H8.
prove Chaine X R X1.
trivial = H3 H5.
elim G2 with H7.
elim H8.
axiom H6.
intro r.
intro l.

left H.

local CI I C = /\K (
  K I ->
  /\C:K K (Succ C) ->
  /\F (Chaine K $subset F -> /\C:F F (Succ C) -> K (Union F)) -> K C).

prove -CI_x /\I CI I I.
trivial =.

prove -CI_f  /\I/\C:(CI I) CI I (Succ C).
trivial =.

prove -CI_U  /\I/\F (Chaine (CI I) $subset F ->  /\C:F F (Succ C) -> CI I (Union F)).
intros.
intros.
elim H7.
lefts H3.
intros.
axiom H3.
intros.
elim H8 with H10.

prove -CI_chaine /\I:(Chaine X R) /\C:(CI I) (Chaine X R C).
intros.
elim H4.
intros.
elim G2.

prove -CI_inc /\C,C' (CI C C' -> C subset C').
intros.
elim H3.
trivial =.
trivial =.
trivial =.

prove -CI_rec /\K,I,C (CI I C ->
  K I ->
  /\C:(CI I) (K C -> K (Succ C)) ->
  /\F (Chaine (CI I) $subset F -> Chaine K $subset F -> /\C:F F (Succ C) -> K (Union F)) -> K C).
intros.
prove CI I C & K C.
elim H3.
intro.
elim CI_x.
intros.
left H7.
intro.
elim CI_f.
elim H5.
intros.
intro.
elim CI_U.
trivial =H7.
elim H6.
trivial =H7.
trivial =H7.
left G3.
 
(* Local close_def CI. *)

prove -CI_case  /\I,C (CI I C -> I = C or \/C':(CI I) C = Succ C' or \/F:(Chaine (CI I) $subset) (/\C:F F (Succ C) & C = Union F)).
intros.
elim CI_rec with H3.
intro l.
intro.
intros.
intro r l.
trivial =H4.
intros.
intro r r.
trivial =H4 H6.

prove -CI_trans /\C1,C2,C3 (CI C1 C2 -> CI C2 C3 -> CI C1 C3).
intros.
elim CI_rec with H4.
intros.
elim CI_f.
intros.
elim CI_U.

prove -CI_Nf /\C1 (Chaine X R C1 -> ~ C1 (f C1)).
intros.
intro.
elim G0 with H4.
intro.

(*
prove -CI_NS /\C1 (Chaine X R C1 -> ~ CI (Succ C1) C1).
intros.
intro.
elim CI_Nf with H3.
elim CI_inc with H4.
trivial =.
*)

prove -CI_finc /\C,C' (CI C C' -> CI (Succ C) (Succ C')).
intros.
elim CI_rec with H3.
intros.
intros.
elim CI_f.
intros.
elim CI_f.
prove Union F = Union \C (\/C':F C = Succ C').
elim equal.extensional.
intro.
elim equal.proposition.
intros.
trivial =.
trivial = H6.
rewrite G3.
elim CI_U.
intro.
trivial =H4.
intro.
intros.
lefts H7 $& $\/.
apply H6 with H7.
elim H5 with H7.
intros.
lefts H7 $& $\/.
lefts H8 $& $\/.
lefts H5 Chaine $& $\/.
elim H12.
elim H6.
elim H6.
intros.
lefts H7 $& $\/.
intros.
select 2.
intro.
elim H6.

local CIS C C' = \/C'' (CI C C'' & C' = Succ C'').

prove -CIS_U /\C,F (Chaine X R C -> /\C':F (CI C C' & F (Succ C')) -> ~ CIS C (Union F)).
intros.
intro.
lefts H5 CIS $& $\/.
prove Union F (f C'').
rewrite H6. trivial =.
prove /\C:(Union F) R C (f C'').
intros.
rewrite_hyp H7  H6.
left H7.
select 2.
prove X (f C'').
apply CI_f with H5.
apply CI_chaine with G4.
elim CI_chaine with H3.
trivial =G4.
trivial =G5 G3 H6.
trivial =H0 H7 G4.
elim G0 with H7.
elim CI_chaine with H5.
lefts G3 Union $& $\/.
apply H4 with H7.
left G3.
prove R (f X0) (f C'').
elim G4.
unfold Union.
intros $& $\/.
axiom H10.
trivial =.
apply G0 with H8.
elim CI_chaine with H9.
left G5.
elim H12.
prove X (f C'').
apply CI_chaine with H8 and H9.
prove X (f X0).
apply CI_f with H9.
apply CI_chaine with G6.
trivial =G7.
trivial =H0 G5 G6 G3 H11.

prove -CI_SF /\C,C' (Chaine X R C -> CI C C' -> ~CIS C C' -> C = C' or CI (Succ C) C').
intro 4.
elim CI_rec with H4.
trivial =.
intros.
elim H7.
trivial =H5.
intros.
intro r.
prove Union F = Union \C' (F C' & C' != C).
elim equal.extensional.
intro.
elim equal.proposition.
intros.
intros.
lefts H9 Union $& $\/.
prove CI C X0.
trivial = H9 H5.
apply H7 with H9.
intros.
axiom G4.
intros.
prove X0 (f X0).
elim CI_inc with G3.
rewrite -r H11.
trivial =.
elim CI_Nf with Chaine X R X0.
elim CI_chaine with G3.
trivial =H10.
trivial =.
rewrite G3.
elim CI_U.
left H5.
left H9.
intro.
select 2.
intro.
intros.
elim excluded_middle with CIS C x0.
lefts H12 $& $\/ CIS.
elim CI_finc.
left H11.
apply H6 with H11 then H12.
trivial =H13 G4.
select 2.
left H5.
intros $& $\/.
elim H7 with H5.
intros.
prove CI C x0.
elim H9 with H5.
prove x0 (f x0).
elim CI_inc with G4.
rewrite -r H11.
trivial =.
elim CI_Nf with Chaine X R x0.
elim CI_chaine with G4.
intros.
elim H10.
left H11.
left H12.
intros.
left H9.
intros.
elim H7.
intros.
prove CI C C0.
elim H5 with H9.
prove C0 (f C0).
elim CI_inc with G4.
rewrite -r H11.
trivial =.
elim CI_Nf with Chaine X R C0.
elim CI_chaine with G4.

prove /\I (Chaine X R I -> /\C,C':(CI I) (CI C C' or CI C' C)).
intro I HC.
intro 2.
elim CI_rec with H3.
intros.
intro l.
intros.
elim CI_rec with H6.
intro r.
elim CI_f.
intros.
apply H5 with H7.
left G3.
select 2.
intro r.
elim CI_finc.
intro l.
elim CI_finc.
intros.
elim H5 with CI I (Union F).
elim CI_U.
elim CI_SF with C0 and (Union F).
elim CI_chaine with HC.
prove ~ CIS I (Union F).
elim CIS_U.
trivial =H7 H9.
intro.
lefts H11 CIS $& $\/.
elim G3.
intros $& $\/ CIS.
elim CI_trans with H4 and H11.
intro r.
elim CI_f.
elim CI_x.
intro l.
intro r.
elim CI_f.
intros.
elim CI_rec with H7.
intro r.
elim CI_U.
intros.
left H9.
select 2.
elim CI_SF with C0 and (Union F).
elim CI_chaine with HC.
prove ~ CIS I (Union F).
elim CIS_U.
trivial =H6 H4.
intro.
lefts H10 CIS $& $\/.
elim G3.
intros $& $\/ CIS.
elim CI_trans with H8 and H10.
intro l.
elim CI_f.
elim CI_x.
intro r.
intro l.
elim CI_f.
intros.

prove /\x:F /\x0:F0 (CI x x0 or CI x0 x).
intros.
apply H8 with H12.
apply H5 with H11 then G3.

prove Union F = Union F0 or \/x:F CI (Union F0) x or \/x:F0 CI (Union F) x.
by_absurd.
Local close_def CI. 
rewrite_hyp H11 demorganl.
lefts H11.
prove /\C:F (CI C (Union F0) or CI (Union F0) C).
intros.
apply H5 with H14 then (Union F0) then ?.
elim CI_U.
prove /\C:F0 (CI C (Union F) or CI (Union F) C).
intros.
apply H9 with H14.
trivial =G5.
prove /\X,A,B (/\x:X (A x or B x) -> /\x:X A x or \/x:X B x).
intros.
by_absurd.
rewrite_hyp H15 demorganl.
lefts H15 $& $\/.
apply H16 with ? then H15.
elim H14 with ? then H15.
elim H17.
elim G6.
apply G6 with G4.
left G7.
select 2.
intro r l.
apply G6 with G5.
left G7.
select 2.
intro r r.
elim H11.
elim equal.extensional.
intros.
elim equal.proposition.
intros.
intros.
lefts H16 Union $& $\/.
apply H14 with H16.
elim CI_inc with G7 then H17.
intros.
lefts H16 Union $& $\/.
apply H15 with H16.
elim CI_inc with G7 then H17.
prove /\X,F (Chaine X $subset F -> /\C:F (Union F = Union \C' (F C' & C subset C'))).
intros.
elim equal.extensional.
intros.
elim equal.proposition.
intros.
intros.
lefts H13 Union $& $\/.
elim H11 with H12 then H13.
trivial =H12 H13 H14 H15.
trivial =H12 H13 H14 H15.
trivial =.
lefts G4.
select 2.
select 3.
lefts H11 $& $\/.
apply G5 with (CI I) then F0 then H11.
intro l.
rewrite G4.
elim CI_U.
intro.
[2] intro.
trivial =H11.
intros.
left H13.
elim H9 with H13. 
prove Union F = x1.
elim equal.extensional.
intros.
elim equal.proposition.
intros.
intros.
elim H14.
elim CI_inc with H12.
intros.
elim CI_inc with H15.
elim CI_x.
trivial =H8.
trivial =H10.
lefts H11 $& $\/.
apply G5 with (CI I) then F then H11.
intro r.
rewrite G4.
elim CI_U.
intro.
[2] intro.
trivial =H11.
intros.
left H13.
elim H5 with H13 then (Union F0) then ?. 
elim CI_U.
prove Union F0 = x1.
elim equal.extensional.
intros.
elim equal.proposition.
intros.
intros.
elim H14.
elim CI_inc with H12.
intros.
elim CI_inc with H15.
elim CI_x.
trivial =H4.
trivial =H6.
intro l.
elim CI_x.

local I y = x = y.
local C0 = Union (CI I).

prove -I_chaine Chaine X R I.
intros.
trivial =H.
intros.
unfold_hyp H3 I.
axiom H.
intros.
unfold_hyp H3 I.
unfold_hyp H4 I.
trivial =H H0 H3 H4.

prove -CI_C0 CI I C0.
elim CI_U.
intros.
elim CI_x.
trivial =.
intros.
elim G3 with I_chaine and H3 and H4.
intro l.
elim CI_inc.
intro r.
elim CI_inc.
intros.
elim CI_f.

prove -C0_chaine Chaine X R C0.
elim CI_chaine with CI_C0.

prove C0 (f C0).
apply CI_f with CI_C0.
unfold -l 1 C0.
unfold Union.
intro.
intros.
axiom G4.
trivial =.

elim CI_Nf with C0_chaine.
save.

theorem Zermelo /\X \/R well.order X R.
intros.

elim excluded_middle with \/u,v (X u & X v & u != v).
left H 2.
left H Xu Xd.
left Xd Xv Xd.

 
local Domain R x = X x & \/y:<'a (R x y or R y x). 
local well.partial.order R = R u v & well.order (Domain R) R.

local Less R R' = 
  R subset_2 R' &
  /\x,y:(Domain R) (R x y <-> R' x y) &
  /\x:(Domain R') (~Domain R x -> /\y:(Domain R) R' y x).

prove -WO order well.partial.order Less.
intros.
intros.
intros.
lefts H2.
lefts H3.
intros.
trivial =H2 H3.
trivial 8 =H2 H4 H6.
intros.
elim excluded_middle with Domain b x.
elim H3.
elim H5.
elim H7.
trivial =H10 H2.

trivial.

intros.
elim equal.extensional.
intros.
elim equal.extensional.
intros.
elim equal.proposition.
trivial =H1.

prove -EX \/R well.partial.order R.
intro.
instance ?1 \x,x' (x = u & x' = v).
intros.
intro.
intro.
intros.
intros.
trivial =.
trivial.
trivial =.
intros.
prove X0 u.
elim H.
trivial =Xu.
intros.
trivial =Xd H2.
lefts H0.
elim H.
lefts H1 $& $or $\/.
select 2.
trivial.
trivial =H0 H1.
intros.
axiom G.

prove -IND /\C (Chaine well.partial.order Less C -> \/R:well.partial.order/\R':C (Less R' R)).
intros.
intro.
instance ?2 Union_2 C.
intro.
intros.
left H.
left H0.
lefts H.
apply H0 with H.
trivial =H G.

intros.
intros.
intros.
lefts H3 Union_2 $& $\/.
lefts H4 Union_2 $& $\/.
apply H with [r] then H3 and H4.
left G.
select 2.
intro.
instance ?3 X0.
intro.
apply H with H3.
apply H7 with b and c and H6.
trivial =G G0 H5 H0 H1 H2.
intros.
instance ?4 X1.
apply H with H4.
apply H7 with a and b and H5.
trivial =G G0 H6 H0 H1 H2.

intros.
intro.
lefts H1.
apply H with H1.
lefts G.
lefts H4.
left H4.
unfold_hyp H7 anti.reflexive.
elim H7 with a.
trivial =H1 H0 H2.

intros.
prove \/R:C (Domain R y & Domain R x).
prove \/R:C Domain R x.
trivial =H0.
prove \/R:C Domain R y.
trivial =H1.
lefts G Domain $& $\/.
lefts G0 Domain $& $\/.
elim H with [r] then [r] then H2 and H5.
intros $& $\/.
axiom H5.
trivial =H6 H7.
trivial =H3 H4 H8.
intros $& $\/.
axiom H2.
trivial =H6 H7 H8.
trivial =H3 H4.
lefts G $& $\/.
apply H with H2.
lefts G.
lefts H6.
apply H7 with ? then H3 and ? then H4.
trivial =H2 G.

intros.
prove \/R:C Domain R a.
trivial =H1.
lefts G Domain $& $\/.
apply H with H2.
lefts G.
lefts H6.
elim H8 with X0.
intros.
elim H0.
trivial =H9 H2.
intros.
prove R b a0.
lefts H12.
elim H with [r] then [r] then H2 and H12.
lefts H14.
elim excluded_middle with Domain R b.
elim H15.
apply H16 with H17 then H9.
trivial =H11 H13.
apply H with H12.
lefts G0.
lefts H19.
apply H19 with H13 and G.
trivial =H11 H13.
trivial =H9 H13.
trivial =H11 H13.
trivial =H11 H13 H19 G0.
trivial =H14 H13.
elim H10.
trivial =H11 G.
trivial =H3 H4.

intros.
intros.
trivial =H0.
intros.
intros.
trivial =H0.

intros.
lefts H3.
elim H with [r] then [r] then H0 and H3.
lefts H5.
elim H6.
elim H5.

intros.
prove \/R:C Domain R x.
trivial =H1.
lefts G $& $\/.
elim H with [r] then [r] then H0 and H4.
lefts H6.
intros.
axiom H4.
elim H8.
trivial =H2 H5 H6.

apply Zorn with Less and IND.
lefts G $& $\/.
intros.
instance ?8 M.
lefts H.
lefts H1.
prove Domain M = X.
elim equal.extensional.
intros.
elim equal.proposition.
intros.
trivial.
intros.
by_absurd.
local M' y z = M y z or (Domain M y & z = x).
prove Less M M'.
intros.
trivial =.
trivial =H5.
intros.
prove Domain M x0 or x0 = x.
trivial =H6.
left G.
select 2.
trivial =H8 H9.
trivial =H7 H9.
apply H0 with M' and G.

intros.
trivial =H.
intros.
intros.
intros.
lefts H10.
select 2.
intro r.
intro.
lefts H9.
select 2.
elim H5.
trivial.
trivial =H9 H6.
left H10.
intro l.
lefts H9.
select 2.
elim H5.
trivial =H9 H10 H4.
lefts H1.
elim H1 with H9 and H10.
trivial =H9 H6.
trivial =H9 H7.
trivial =H10 H8.

intros.
intros.
lefts H7.
select 2.
trivial =H5 H7.
lefts H1.
elim H8.
trivial =H6 H7.

intros.
elim excluded_middle with x0 =x.
elim excluded_middle with y =x.
intro r r.
intro.
intro r l.
intro r.
intro.
trivial =H7 H9.
elim excluded_middle with y =x.
intro l.
intro r.
intro.
trivial =H6 H8.
prove Domain M x0.
trivial =H6 H8.
prove Domain M y.
trivial =H7 H9.
apply H2 with G0 and G1.
trivial =G2.

intros.
prove /\c:(Domain M) X0 c.
intros.
elim H3.
intros.
elim H6.
trivial =H9.
intros.
lefts H12.
select 2.
trivial =H5 H9 H12.
elim H10.
trivial = H12 H11.
elim excluded_middle with a =x.
elim H6.
intros.
elim G0.
trivial =H8 H9 H10 H5.
elim G0.
trivial =H8 H7 H5.
rewrite G0.
intros.
intro r.
intro r.
trivial =H Xu.
intros.
axiom H1.
axiom H2.
axiom H3.

rewrite_hyp H demorganl.
intro.
instance ?11 \x,x' False.
auto.
save.
