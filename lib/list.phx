(* $State: Exp $ $Date: 2004/12/08 14:36:08 $ $Revision: 1.12 $ *)
(*header 99/03/18
	title = "Lists"
 	author = "Christophe Raffalli, Paul Roziere"
	institute = "Equipe de Logique, Université Chambéry, Paris VII"
*)

flag auto_lvl 1.

(** Basic definitions and properties *)

(*** Definitions and axioms *)
(*texte
To define lists, we extend the language with one
constant symbols $nil  and one binary function
symbol [ x :: l ].
*)

Sort list['a].
Cst (* empty list *) nil : list['a].
tex_syntax nil Math "\[\]".
Cst (* cons *)  rInfix[4] x "::" y : 'a -> list['a] -> list['a].
(* x :: y *)
tex_syntax $:: rInfix[4] x ! "\\,\\, :: \\;\\;\\;\\;" ! y.

(*texte
Then the list predicate is defined as follows:
*)
def List D x = /\X (X nil -> /\a:D /\y:X X (a::y) -> X x).
tex_syntax List Prefix[5] "\\rm I\\hspace{-0.2em}L" ! "_{" ! D ! "}".

(*texte
We assume the following.
*)

(*axiom *)
claim (* empty list $nil is not a $:: (cons) *) nil_not_cons.List 
		/\x,l (nil != x::l).
claim (* injectivity of list constructor $:: (cons) *) cons.injective.List 
			/\x1,l1,x2,l2 (x1 :: l1 = x2 :: l2 -> x1 = x2 & l1 = l2).
(*endaxiom *)

(*** Rules on lists *)
(*texte
We prove the introduction and elimination rules for lists.
*)
(*note
These rules are added respectively as introdution and
elimination rules, with the given abbreviations.
*)
(**** Introduction rules *)
fact (* nil is a list *) nil.total.List  /\D List D nil.
trivial.
save.

fact (* $:: (cons) is well defined *) cons.total.List
 /\D /\a:D /\l:(List D) List D (a::l).
trivial.
save.

new_intro -i -c nil nil.total.List.
new_intro -i -c cons cons.total.List.

(**** Elimination rules *)

fact (* structural induction on lists *) rec.List 
	/\D /\X (X nil -> /\a:D/\l':(List D) (X l' -> X (a :: l')) -> 
                  /\l:(List D) X l).
intro 6.
use List D l & X l.
trivial.
elim H1.
trivial.
intro 4.
trivial.
save.

fact (* reasoning by cases on the structure of lists *) case.List 
	/\D /\l:(List D) (l = nil or \/d:D\/l':(List D) l = d::l').
intros.
elim H.
intro l. trivial.
intros.
intro r. trivial -H.
save.

fact case_left.List /\D,X /\l ((l = nil -> X nil) ->
  /\d:D /\l':(List D) (l = d::l' -> X (d::l')) -> List D l -> X l).
intros.
elim case.List with H1.
elim H.
lefts H2 $& $\/.
elim H0.
save.

new_elim List rec rec.List.
new_elim -n List case case_left.List.
new_elim -n List ocase case.List.


(**** Left rules (eliminating list constructors) 
*)
fact (*   $:: (cons) is not $nil *) cons_not_nil.List /\x,l (x::l != nil).
trivial +nil_not_cons.List.
save.


fact (* injectivity of list constructor (rule form) *)cons.injective_left.List
 /\X,x1,x2,l1,l2 ((x1 = x2 -> l1 = l2 -> X) -> x1::l1 = x2 ::l2 -> X).
trivial +cons.injective.List.
save.

(*note
These two facts and the first claim are added as invertible left rules.
We close then definition of lists.
*)

new_elim -i -n $= nil_not_cons nil_not_cons.List.
new_elim -i -n $= cons_not_nil cons_not_nil.List.
new_elim -i -n $= cons.injective_left cons.injective_left.List.

fact cons.left.List /\X,A,a,l ((A a -> List A l -> X) -> List A (a::l) -> X).
intros.
elim H0 with [case].
left H1.
trivial.
save.

new_elim -i -n List cl cons.left.List.

close_def List.

(*** Decidability of equality *)

fact (* equality is decidable on lists *)  eq_dec.List 
	/\D (equal.decidable D -> equal.decidable (List D)).
intro 4.
elim H0.
trivial -H0.
intro 2.
elim H4.
trivial.
elim -1 l0' H3.
elim -1 a -3 a0 H.
trivial 0 -H7.
trivial -H7.
trivial -H7.
save.
new_intro -i -t List eq_dec.List.

(** Defining functions by induction on lists *)
(*** Definition 
*)
(*texte 
In order to introduce definition of functions by structural
induction on list we will use the operator [ Def ] of definite
description. We then first introduce the following predicate.

The predicate [ def_rec_P.List a f l z ] defines a
function which maps the list [ l ] to [ z ] using structural induction
on the list [ l ] with  [ a ] as
base case (when [ l = nil ]) and [ f ] for the cons case.
*)

def   (* definition by induction on lists : predicate version *)
  def_rec_P.List a f l z = /\X (
	X nil a ->
	/\l:(List \x True)/\x,r (X l r  -> X (x::l) (f x l r)) -> X l z).
tex_syntax def_rec_P.List Math 
	"\\text{\\rm DEF}_{\\rm I\\hspace{-0.2em}L}^{rec}".
(*note
Note: you should remark the use of [ \x True ] to use lists of 
*anything* !
*)

(*texte 
We prove then that [ def_rec_P.List a f l z ] effectively
defines a function. 
 *)

Local lem def_rec_unique.List 
	/\a,f,l (List (\x True) l -> \/!z def_rec_P.List a f l z).
intros.
elim H.
intro.
trivial.
intros.
elim -1 \l,z (nil = l -> z = a) H0.
trivial.
trivial.
trivial.
left H2.
intro.
trivial.
intros.
elim -1 \l,z' (def_rec_P.List a f l z' & (l = a0::l' -> z' = f a0 l' z))
     -4 [s] H4.
trivial.
intros.
left H6.
intro.
trivial.
intros.
left H8.
prove r = z.
elim H3.
trivial.
trivial.
trivial.
save.

(*texte
The main theorem about untyped list is the following.
*)

fact (* Untyped list *) True.List /\D /\l:(List D) List \x True l.
trivial.
save.

new_intro -o 1.0 True True.List.
(*note
We add it as an introduction rule.
*)

(*texte
 Using the definite description, we can now define an operator
$def_rec.List that introduces a function symbol [ def_rec.List a f ]
for any definition by induction on lists !
*)

def (* definition by induction on list *) 
 def_rec.List a f l = Def \z (def_rec_P.List a f l z).
tex_syntax def_rec.List Math 
	"\\text{\\rm def}_{\\rm I\\hspace{-0.2em}L}^{rec}".



(*texte
Using the properties of the definite description, we can prove
the  following.
*)

(*fact Characteristic properties of definitions by induction *)

fact (* characteristic property of definition by induction on list :
base case *) def_rec.nil.List 
  /\f/\a def_rec.List a f nil = a.
intros.
elim Def.lemma.
elim def_rec_unique.List.
trivial.
trivial.
save.

fact (* characteristic property of definition by induction on list :
recurrence step *) def_rec.cons.List 
  /\f/\a/\x/\l:(List \x True) def_rec.List a f (x::l) = 
    f x l (def_rec.List a f l).
intros.
elim Def.lemma.
elim def_rec_unique.List.
trivial.
prove def_rec_P.List a f l (def_rec.List a f l).
trivial +def_rec_unique.List.
trivial.
save.

new_equation def_rec.nil.List.
new_equation def_rec.cons.List.
(*endfact *)

(*note
These theorems are added as rewriting rules and then the
definition of $def_rec.List is closed
*)

close_def def_rec.List.


(*texte
We can now prove the totality of any definition by induction:
*)

fact (* Totality of a function defined by induction on lists *) def_rec.total.List 
/\X,D/\f:(D => List D => X => X)/\a:X/\l:(List D) X (def_rec.List a f l).
trivial 6.
save.
new_intro -t def_rec def_rec.total.List.


(*** Application : operations on lists
*)

(**** The append function 
*)

(*
The concatenation of two lists is defined by:
*)

def rInfix[4.5] l "@" l' = def_rec.List l' \d,l,r (d::r) l.
(* l @ l' = def_rec.List l' \d,l,r (d::r) l *)
tex_syntax $@ rInfix[4.5] l "\\mathbin{@}" l'.

(*texte
We prove the following properties of [ l @ l' ].
*)

(*fact Characteristic properties of $@ *)
fact append.lnil.List /\l nil @ l = l.
trivial.
save.
new_equation append.lnil.List.

fact append.lcons.List /\a/\l:(List \x True)/\l' (a::l) @ l' = a::(l @ l').
trivial.
save.
new_equation append.lcons.List.
(*endfact *)


close_def $@.

fact (* totality of $@ *) append.total.List 
			/\D /\l,l':(List D) List D (l @ l').
intros.
elim H.
from H0.
intro.
save.
new_intro -i -t append append.total.List.

fact append.rnil.List /\l:(List \x True) l @ nil = l.
trivial.
save.
new_equation append.rnil.List.

fact (* associativity of $@ *) append.associative.List
	 /\x,y,z:(List \x True) (x @ y) @ z = x @ (y @ z).
trivial.
save.
new_equation append.associative.List.



(**** The map functional 
*)

(*texte We define : *)
def map f l = def_rec.List nil \a,l,r (f a::r) l.

(*fact Characteristics properties of $map. *)  
fact map.nil.List /\f map f nil = nil.
trivial.
save.

fact map.cons.List /\f/\a/\l:(List \x True) map f (a::l) = (f a)::(map f l).
trivial.
save.
(*endfact *)

new_equation map.nil.List.
new_equation map.cons.List.
close_def map.

fact (* totality of $map *)  map.total.List 
		/\D,D' /\f:(D => D') /\l:(List D) List D' (map f l).
trivial 6.
save.
new_intro -i -t map map.total.List.

fact (* $map on $@ *) map.append.List
	  /\f /\l1,l2:(List \x True) map f (l1 @ l2) = (map f l1) @ (map f l2).
trivial 6.
save.
new_equation map.append.List.



(*** Head and tail of a list as partial functions *)
(**** Definitions 
*)

def (* graph of head *) headP l a  =  \/ l'  l = a::l'.
def (* graph of tail *) tailP l l' =  \/ a l = a::l'.

Local lemma (* $headP defines a partial function *) headP_unique 
		 /\l:(List \x True) /\b \/!a (headP  (b::l) a).
trivial.
save.

Local lemma (* $tailP defines a partial function *) tailP_unique 
		 /\l:(List \x True) /\b \/!l' (tailP  (b::l) l').
trivial.
save.

def (* head *) head   l = Def \z(headP l z).
def (* tail *) tail l = Def \z(tailP l z).


(**** Basic facts 
*)
fact (* Characteristic property of head *) head.cons.List 
				/\D /\a :D /\l:(List D) head (a::l) = a.
intros.
elim -1l -3a headP_unique.
trivial.
trivial.
save.

new_equation  head.cons.List.


fact (* Characteristic property of tail *) tail.cons.List 
			/\D/\a:D/\l:(List D) tail (a::l) = l.
intros.
elim -1l -3a tailP_unique.
trivial.
trivial.
save.
new_equation tail.cons.List.

fact (* totality of head on its definition set *) head.total.List
/\D /\ l:(List D)( l != nil -> D(head l)).
trivial.
save.

fact (* totality of tail on its definition set *) tail.total.List
/\D /\ l:(List D)( l != nil -> (List D(tail l))).
trivial.
save.

new_intro -t head head.total.List.
new_intro -i -t tail tail.total.List.



fact cons_head_tail.List /\D /\l:(List D) (l != nil -> head l :: tail l = l).
trivial.
save.

new_equation cons_head_tail.List.

(*** Quantifiers bounded on lists.*)
(**** Existence in a list 
*)


(***** Definition 
*)
def (* there exists x:D in l *) Exists D l =
/\ X (/\a/\l(D a ->  X(a::l)) -> /\a/\l(X l -> X (a::l)) -> X l).


(***** Introduction rules
*)
fact (* left introducing $Exists *) Exists.lcons.List
/\D/\a/\l ( D a -> Exists D(a::l)).
trivial.
save.

fact (* right introducing $Exists *) Exists.rcons.List
/\D/\a/\l ( Exists D l -> Exists D(a::l)).
trivial.
save.

new_intro Exists.lcons Exists.lcons.List.
new_intro  Exists.rcons Exists.rcons.List.

(***** Elimination rules
*)
fact (* Nothing in $nil *) Exists.nil.List /\D ~ (Exists D nil).
intro.
intro.
elim -1 (\l \/a\/l'(a::l' = l)) H.
trivial.
trivial.
trivial.
save.




(*
depend Exists.nil.List : nil_not_cons.List  equal.reflexive 
*)

fact (* eliminating $Exists in cons *) Exists.elim_cons.List
			/\D/\a/\l (Exists D(a::l) -> D a or Exists D l).
intros.
elim -1 (\l' \/a,l(l'= a::l & (D a or Exists D l))) H.
trivial.
trivial.
trivial.
save.

new_elim $Exists Exists.nil Exists.nil.List.
new_elim $Exists Exists_cons Exists.elim_cons.List.

(*
depend Exists.elim_cons.List : cons.injective.List equal.reflexive
*)


(* close_def Exists. *)

(***** Existence in  append
*)

fact (* left introducing $Exists in $@ *) Exists.lappend.List 
	/\D /\l:(List \x True) /\l' (Exists D l -> Exists D (l@l')).
intro 4.
elim H.
trivial.
intro.
rewrite append.lcons.List.
elim  H3.
intro Exists.lcons.
intro Exists.rcons.
elim H2.
save.

fact (* right introducing $Exists in $@ *) Exists.rappend.List 
	/\D /\l:(List \x True) /\l' (Exists D l' -> Exists D (l@l')).
intro 4.
elim H.
trivial.
intro.
rewrite append.lcons.List.
intro Exists.rcons.
elim H2.
save.

new_intro Exists.lappend Exists.lappend.List.
new_intro Exists.rappend Exists.rappend.List.



fact (* eliminating $Exists in $@ *) Exists.elim_append.List
	/\D/\l:(List \x True)/\l' (Exists D(l @ l') 
						-> Exists D l or Exists D l').
intro 4.
elim H.
intro.
intro r.
trivial.
intro.
elim H3.
intro l.
intro Exists.lcons.
apply -1 H4 H2.
slh G.
left G.
intro l.
intro Exists.rcons.
intro r.
save.

new_elim $Exists Exists.elim_append Exists.elim_append.List.

(**** Universal quantifer bounded on a list
*)

(*texte
Universal closure of the predicate D on the list l is 
exactly List D l
*)

def (* Forall x such that D in l *) Forall =  List.

(*texte
Results on list can then be reinterpreted, for instance 
[/\D List D nil] is [/\D forall D nil].
 
It is also the case of the following facts.
*)

fact (* introducing list of a type stronger *) List_increasing 
			/\A,B (/\x:A B x -> /\l:(List A) List B l). 
trivial.
save.

new_elim -t List inc List_increasing.

fact (* list of objects of type [ A & B ] *) List_conjunction 
	/\A,B/\l (List A l -> List B l -> List \x (A x & B x) l). 
intro 4.
elim H.
trivial.
intros.
elim -1 [case] H3.
intro.
trivial.
save.

(*** Membership in a list
*)
(*texte
All facts are trivially derived as particular cases of analogous ones
with $Exists .
*)

(**** Introduction rules 
*)
def (* membership in list *) Mem x l = Exists \y (x = y) l.


fact(* left introducing $Mem in cons *) Mem.lcons.List /\a/\l Mem a (a::l).
trivial.
save.

fact(* right introducing $Mem in cons *) Mem.rcons.List 
				/\b/\a/\l (Mem b l -> Mem b (a::l)).

trivial.
save.

new_intro Mem.lcons Mem.lcons.List.
new_intro Mem.rcons Mem.rcons.List.

(**** Elimination rules
*)
fact (* no member of nil *) Mem.nil.List /\x ~ Mem x nil.
trivial.
save.

fact  (* eliminating $Mem in cons *) Mem.elim_cons.List
                        /\b/\a/\l (Mem b (a::l) -> b = a or Mem b l).
trivial.
save.


new_elim  $Mem Mem.nil Mem.nil.List.
new_elim  $Mem Mem_cons Mem.elim_cons.List.

(**** Membership in append *)

(* flag trace_trivial true.
*)
fact  (* left introducing $Mem in $@ *) Mem.lappend.List
        /\b /\l:(List \x True) /\l' (Mem b l -> Mem b (l@l')).
trivial +Exists.lappend.List.
save.

fact  (* right introducing $Mem in $@ *) Mem.rappend.List
        /\b /\l:(List \x True) /\l' (Mem b l' -> Mem b (l@l')).
trivial.
save.


fact  (* eliminating $Mem in $@ *) Mem.elim_append.List
        /\b /\l:(List \x True)/\l' (Mem b (l @ l')
                                                -> Mem b l or Mem b l').
trivial  + Exists.elim_append.List.
save.

