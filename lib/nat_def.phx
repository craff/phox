(* $State: Exp $ $Date: 2002/01/25 22:23:14 $ $Revision: 1.4 $ *)
(*header 1998/03/16

	title = "Natural numbers : second order definition"
	author = "Christophe Raffalli, Paul Roziere"
	institute = "Paris VII, Paris XII university"
*)

flag auto_lvl 1.

(** Basic definitions. *)

(*texte 
To define the natural numbers, we extend the language with one
contant symbol [ N0 ] and one unary function symbol [ S x]. 
Then the natural numbers are defined by the following predicate [N x]
*)

(*definition  Church integers  *)
Sort nat.
Cst N0 : nat.
Cst Prefix[2] "S" x : nat -> nat.
(* S x *)
def N x = /\X (X N0 -> /\y (X y -> X (S y)) -> X x).
(*enddefinition *)

tex_syntax N0 Math "0".
tex_syntax $S Prefix[2] "\\text{\\rm S}" x.
tex_syntax N Math "{\\rm I\\hspace{-0.2em}N}".


(*** Introduction rules for $N. *)


fact (* $N0 is an integer *) N0.total.N 
		N N0.
intros.
save.

fact (* The successor function $S is total *) S.total.N 
		/\x:N N(S x).
trivial.
save.

new_intro -i -c N0 N0.total.N.
new_intro -i -c S S.total.N.

(*** Elimination rules for $N. *)

(**** Induction on natural number as an elimination rule. *)

fact (* Induction on $N *) rec.N 
 /\X (X N0 -> /\y:N (X y -> X (S y)) -> /\x:N X x).
intro 5.
(*ยง 1 goal created.
H := X N0
H0 := /\y:N  (X y -> X (S y))
H1 := N x
   |- X x
*)
elim -1 [r] N x & X x.
elim H1.
intros.
intro.
(*ยง ...
   |- /\y (N y & X y -> N (S y) & X (S y))
*)
trivial.
save.


(**** Elimination by case on $N. *)

fact (* case on $N *) case.N 
	 /\x : N (x = N0 or \/z:N x = S z).
intros.
elim H.
trivial.
trivial.
save.

fact case_left.N
   /\X,x ((x = N0 -> X N0) -> /\y (N y -> x = S y -> X (S y)) -> N x -> X x).
intros.
apply case.N with H1.
trivial.
save.

new_elim -n N case case_left.N.
new_elim N rec rec.N.

close_def N.

(*texte
The introduction rules are added with the command #new_intro -c#.
The option #-c# indicates that $N0  and  $S  are
constructors and the trivial tactic will try to use these rules when
the goal is of the form [P N0] or [P (S t)] even if [P] is a
unification variable.

The elimination rules are added  with the command #new_elim#
using the option #-n# for [ case.N]. This tells PhoX that this
second rule is not necessary for completeness. 

The abbreviations are given with the rules. For instance, 
#elim case.N with H# is equivalent to #elim H with \[case\]#
and 
#elim N0.total.N # is equivalent to #intro N0#.
*)

(*** left rules for $= on $N *)

(*texte We add usual axioms of Peano Arithmetic.   *)
(*axiom *)
claim (* zero and successor distinct *) N0_not_S.N /\x:N (N0 != S x).
claim (* successor injective *) S_inj.N /\x,y:N (S x = S y -> x = y).
(*endaxiom *)

(*texte
We also prove the following left rules for natural numbers (the first one is
an axiom ).
*)

(*fact Showing that integers are distincts. *)

fact S_not_N0.N /\x:N S x != N0.
trivial +N0_not_S.N.
save.
new_elim -i -n $= S_not_N0 S_not_N0.N.
new_elim -i -n $= N0_not_S N0_not_S.N.

fact S_inj_left.N /\X/\x,y:N ((x = y -> X) -> S x = S y -> X).
trivial +S_inj.N.
save.
new_elim -i -n $= S_inj S_inj_left.N.

fact x_not_Sx.N /\x:N (x != S x).
trivial 6.
save.
new_elim -i -n $= x_not_Sx x_not_Sx.N.

fact Sx_not_x.N /\x:N (S x != x).
trivial +x_not_Sx.N. 
save.
new_elim -i -n $= Sx_not_x Sx_not_x.N.
(*endfact *)

(* texte 
These rules are added as elimination rule using the command
#new_elim -i -n#. The system automaticaly detects that these are
left rules (because the right most atomic formula is a predicate
variable). The option #-n# tells PhoX not to use these rules during
automatic proof search in general (because they are not necessary for
completeness). The option #-i# tells PhoX that these rules are
invertible and if an hypothesis is such that an invertible left rule
is applicable, then the #trivial# tactic applies it
immediately. For instance if [S S x = S N0] is among the hypothesis,
then in two steps, the automatic proof search prove the goal using the
rules [S_inj_left.N] and [Sx_not_N0_left.N].
*)
